diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/apply.hpp modified/boost_1_33_1/boost/mpl/apply.hpp
--- original/boost_1_33_1/boost/mpl/apply.hpp	2004-09-02 15:40:41.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/apply.hpp	2015-12-18 04:02:14.640625000 +0000
@@ -135,7 +135,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 
 #   define i_ BOOST_PP_FRAME_ITERATION(1)
 
@@ -222,4 +225,5 @@
 
 #   undef i_
 
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/apply_wrap.hpp modified/boost_1_33_1/boost/mpl/apply_wrap.hpp
--- original/boost_1_33_1/boost/mpl/apply_wrap.hpp	2004-09-03 15:56:55.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/apply_wrap.hpp	2015-12-18 04:02:14.640625000 +0000
@@ -78,7 +78,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 
 #   define i_ BOOST_PP_FRAME_ITERATION(1)
 
@@ -197,4 +200,5 @@
 
 #   undef j_
 
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/aux_/advance_backward.hpp modified/boost_1_33_1/boost/mpl/aux_/advance_backward.hpp
--- original/boost_1_33_1/boost/mpl/aux_/advance_backward.hpp	2004-09-02 15:40:43.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/aux_/advance_backward.hpp	2015-12-18 04:02:14.593750000 +0000
@@ -79,7 +79,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 #define i_ BOOST_PP_FRAME_ITERATION(1)
 
 template<>
@@ -121,4 +124,5 @@
 #   undef AUX778076_ITER_1
 #   undef AUX778076_ITER_0
 
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/aux_/advance_forward.hpp modified/boost_1_33_1/boost/mpl/aux_/advance_forward.hpp
--- original/boost_1_33_1/boost/mpl/aux_/advance_forward.hpp	2004-09-02 15:40:43.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/aux_/advance_forward.hpp	2015-12-18 04:02:14.609375000 +0000
@@ -79,7 +79,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 #define i_ BOOST_PP_FRAME_ITERATION(1)
 
 template<>
@@ -120,4 +123,5 @@
 #   undef AUX778076_ITER_1
 #   undef AUX778076_ITER_0
 
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/aux_/full_lambda.hpp modified/boost_1_33_1/boost/mpl/aux_/full_lambda.hpp
--- original/boost_1_33_1/boost/mpl/aux_/full_lambda.hpp	2004-09-04 01:10:19.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/aux_/full_lambda.hpp	2015-12-18 04:02:14.593750000 +0000
@@ -227,7 +227,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 #define i_ BOOST_PP_FRAME_ITERATION(1)
 
 #if i_ > 0
@@ -347,4 +350,5 @@
 };
 
 #undef i_
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/aux_/numeric_op.hpp modified/boost_1_33_1/boost/mpl/aux_/numeric_op.hpp
--- original/boost_1_33_1/boost/mpl/aux_/numeric_op.hpp	2004-12-20 19:17:06.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/aux_/numeric_op.hpp	2015-12-18 04:02:14.578125000 +0000
@@ -287,7 +287,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 
 #   define i_ BOOST_PP_FRAME_ITERATION(1)
 
@@ -308,4 +311,5 @@
 
 #   undef i_
 
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/bind.hpp modified/boost_1_33_1/boost/mpl/bind.hpp
--- original/boost_1_33_1/boost/mpl/bind.hpp	2004-10-26 14:51:04.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/bind.hpp	2015-12-18 04:02:14.625000000 +0000
@@ -361,7 +361,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 
 #   define i_ BOOST_PP_FRAME_ITERATION(1)
 
@@ -544,4 +547,5 @@
 #   endif
 #   undef j_
 
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/mpl/unpack_args.hpp modified/boost_1_33_1/boost/mpl/unpack_args.hpp
--- original/boost_1_33_1/boost/mpl/unpack_args.hpp	2004-09-02 15:40:42.000000000 +0000
+++ modified/boost_1_33_1/boost/mpl/unpack_args.hpp	2015-12-18 04:02:14.625000000 +0000
@@ -111,7 +111,10 @@
 
 ///// iteration, depth == 1
 
-#elif BOOST_PP_ITERATION_DEPTH() == 1
+// For gcc 4.4 compatability, we must include the
+// BOOST_PP_ITERATION_DEPTH test inside an #else clause.
+#else // BOOST_PP_IS_ITERATING
+#if BOOST_PP_ITERATION_DEPTH() == 1
 
 #   define i_ BOOST_PP_FRAME_ITERATION(1)
 
@@ -143,4 +146,5 @@
 
 #   undef i_
 
+#endif // BOOST_PP_ITERATION_DEPTH()
 #endif // BOOST_PP_IS_ITERATING
diff --recursive '--unified=3' original/boost_1_33_1/boost/numeric/ublas/detail/vector_assign.hpp modified/boost_1_33_1/boost/numeric/ublas/detail/vector_assign.hpp
--- original/boost_1_33_1/boost/numeric/ublas/detail/vector_assign.hpp	2005-07-01 20:09:01.000000000 +0000
+++ modified/boost_1_33_1/boost/numeric/ublas/detail/vector_assign.hpp	2015-12-18 04:34:52.000000000 +0000
@@ -139,7 +139,10 @@
     void vector_assign_scalar (V &v, const T &t, dense_proxy_tag) {
 #ifdef BOOST_UBLAS_USE_INDEXING
         indexing_vector_assign_scalar<F> (v, t);
-#elif BOOST_UBLAS_USE_ITERATING
+// For gcc 4.4 compatability, we must include the
+// BOOST_UBLAS_USE_ITERATING test inside an #else clause.
+#else // BOOST_UBLAS_USE_INDEXING
+#if BOOST_UBLAS_USE_ITERATING
         iterating_vector_assign_scalar<F> (v, t);
 #else
         typedef typename V::size_type size_type;
@@ -148,6 +151,7 @@
             iterating_vector_assign_scalar<F> (v, t);
         else
             indexing_vector_assign_scalar<F> (v, t);
+#endif // BOOST_UBLAS_USE_ITERATING
 #endif
     }
     // Packed (proxy) case
@@ -278,7 +282,10 @@
     void vector_assign (V &v, const vector_expression<E> &e, dense_proxy_tag) {
 #ifdef BOOST_UBLAS_USE_INDEXING
         indexing_vector_assign<F> (v, e);
-#elif BOOST_UBLAS_USE_ITERATING
+// For gcc 4.4 compatability, we must include the
+// BOOST_UBLAS_USE_ITERATING test inside an #else clause.
+#else // BOOST_UBLAS_USE_INDEXING
+#if BOOST_UBLAS_USE_ITERATING
         iterating_vector_assign<F> (v, e);
 #else
         typedef typename V::size_type size_type;
@@ -287,6 +294,7 @@
             iterating_vector_assign<F> (v, e);
         else
             indexing_vector_assign<F> (v, e);
+#endif // BOOST_UBLAS_USE_ITERATING
 #endif
     }
     // Packed (proxy) case
diff --recursive '--unified=3' original/boost_1_33_1/boost/numeric/ublas/vector_expression.hpp modified/boost_1_33_1/boost/numeric/ublas/vector_expression.hpp
--- original/boost_1_33_1/boost/numeric/ublas/vector_expression.hpp	2005-07-13 05:57:36.000000000 +0000
+++ modified/boost_1_33_1/boost/numeric/ublas/vector_expression.hpp	2015-12-18 04:33:06.000000000 +0000
@@ -1388,7 +1388,10 @@
         value_type evaluate (dense_random_access_iterator_tag) const {
 #ifdef BOOST_UBLAS_USE_INDEXING
             return functor_type::apply (e_);
-#elif BOOST_UBLAS_USE_ITERATING
+// For gcc 4.4 compatability, we must include the
+// BOOST_UBLAS_USE_ITERATING test inside an #else clause.
+#else // BOOST_UBLAS_USE_INDEXING
+#if BOOST_UBLAS_USE_ITERATING
             difference_type size = e_.size ();
             return functor_type::apply (size, e_.begin ());
 #else
@@ -1397,6 +1400,7 @@
                 return functor_type::apply (size, e_.begin ());
             else
                 return functor_type::apply (e_);
+#endif // BOOST_UBLAS_USE_ITERATING
 #endif
         }
 
@@ -1525,7 +1529,10 @@
         value_type evaluate (dense_random_access_iterator_tag) const {
 #ifdef BOOST_UBLAS_USE_INDEXING
             return functor_type::apply (e1_, e2_);
-#elif BOOST_UBLAS_USE_ITERATING
+// For gcc 4.4 compatability, we must include the
+// BOOST_UBLAS_USE_ITERATING test inside an #else clause.
+#else // BOOST_UBLAS_USE_INDEXING
+#if BOOST_UBLAS_USE_ITERATING
             difference_type size = BOOST_UBLAS_SAME (e1_.size (), e2_.size ());
             return functor_type::apply (size, e1_.begin (), e2_.begin ());
 #else
@@ -1534,6 +1541,7 @@
                 return functor_type::apply (size, e1_.begin (), e2_.begin ());
             else
                 return functor_type::apply (e1_, e2_);
+#endif // BOOST_UBLAS_USE_ITERATING
 #endif
         }
 
diff --recursive '--unified=3' original/boost_1_33_1/libs/regex/src/cregex.cpp modified/boost_1_33_1/libs/regex/src/cregex.cpp
--- original/boost_1_33_1/libs/regex/src/cregex.cpp	2005-03-30 11:38:32.000000000 +0000
+++ modified/boost_1_33_1/libs/regex/src/cregex.cpp	2015-12-18 05:12:08.031250000 +0000
@@ -362,7 +362,7 @@
 #if BOOST_WORKAROUND(BOOST_MSVC, >= 1400)
          (::sprintf_s)(buf, sizeof(buf), "%s%s%s", dstart.path(), directory_iterator::separator(), ptr);
 #else
-         (std::sprintf)(buf, "%s%s%s", dstart.path(), directory_iterator::separator(), ptr);
+         sprintf(buf, "%s%s%s", dstart.path(), directory_iterator::separator(), ptr);
 #endif
          BuildFileList(pl, buf, recurse);
          ++dstart;
diff --recursive '--unified=3' original/boost_1_33_1/libs/regex/src/fileiter.cpp modified/boost_1_33_1/libs/regex/src/fileiter.cpp
--- original/boost_1_33_1/libs/regex/src/fileiter.cpp	2005-03-30 11:38:32.000000000 +0000
+++ modified/boost_1_33_1/libs/regex/src/fileiter.cpp	2015-12-18 05:12:08.046875000 +0000
@@ -30,7 +30,6 @@
 #include <cstdio>
 #if defined(BOOST_NO_STDC_NAMESPACE)
 namespace std{
-   using ::sprintf;
    using ::fseek;
    using ::fread;
    using ::ftell;
@@ -788,9 +787,9 @@
 {
    char buf[MAX_PATH];
    if( ( (root[0] == *_fi_sep) || (root[0] == *_fi_sep_alt) ) && (root[1] == '\0') )
-      (std::sprintf)(buf, "%s%s", root, name);
+      sprintf(buf, "%s%s", root, name);
    else
-      (std::sprintf)(buf, "%s%s%s", root, _fi_sep, name);
+      sprintf(buf, "%s%s%s", root, _fi_sep, name);
    DIR* d = opendir(buf);
    if(d)
    {
diff --recursive '--unified=3' original/boost_1_33_1/libs/regex/src/posix_api.cpp modified/boost_1_33_1/libs/regex/src/posix_api.cpp
--- original/boost_1_33_1/libs/regex/src/posix_api.cpp	2005-03-30 11:38:32.000000000 +0000
+++ modified/boost_1_33_1/libs/regex/src/posix_api.cpp	2015-12-18 05:12:08.046875000 +0000
@@ -24,7 +24,6 @@
 
 #if defined(BOOST_NO_STDC_NAMESPACE)
 namespace std{
-   using ::sprintf;
    using ::strcpy;
    using ::strcmp;
 }
@@ -148,7 +147,7 @@
 #if BOOST_WORKAROUND(BOOST_MSVC, >= 1400)
             (::sprintf_s)(localbuf, 5, "%d", i);
 #else
-            (std::sprintf)(localbuf, "%d", i);
+            sprintf(localbuf, "%d", i);
 #endif
             if(std::strlen(localbuf) < buf_size)
                re_detail::strcpy_s(buf, buf_size, localbuf);
@@ -158,7 +157,7 @@
 #if BOOST_WORKAROUND(BOOST_MSVC, >= 1400)
       (::sprintf_s)(localbuf, 5, "%d", 0);
 #else
-      (std::sprintf)(localbuf, "%d", 0);
+      sprintf(localbuf, "%d", 0);
 #endif
       if(std::strlen(localbuf) < buf_size)
          re_detail::strcpy_s(buf, buf_size, localbuf);
