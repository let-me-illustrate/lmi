# Continuous integration workflow for lmi: build Linux and MSW binaries.
name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'gwc/*'
      - 'tabs/*'
      - 'vz/*'
      - 'lmi_setup*.sh'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'gwc/*'
      - 'tabs/*'
      - 'vz/*'
      - 'lmi_setup*.sh'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: debian:sid-slim
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: MSW/make/mingw32
            triplet: i686-w64-mingw32
            mingw: true
          - name: Linux/make/gcc
            mingw: false
          - name: Linux/autotools/gcc
            mingw: false
            autotools: true
          - name: Linux/autotools/clang
            compiler: clang
            mingw: false
            autotools: true
    env:
      LMI_COMPILER: ${{ matrix.compiler || 'gcc' }}
      LMI_TRIPLET: ${{ matrix.triplet || 'x86_64-pc-linux-gnu' }}

    # Run all commands as the normal user, created by the first step below.
    #
    # Note that the Bash options used here are the same as for the default
    # shell used by GitHub Actions to minimize any surprises.
    defaults:
      run:
        shell: /usr/bin/setpriv --reuid=runner --regid=adm --clear-groups --inh-caps=-all bash --noprofile --norc -eo pipefail {0}

    steps:
      - name: Set up container user
        # Specify the default shell explicitly to override the default value above.
        shell: bash
        run: |
          apt-get -q -o=Dpkg::Use-Pty=0 update
          apt-get -qq install sudo

          # Create a user with the same UID/GID and name as the existing user
          # outside of the container and allow it using sudo without password.
          useradd --home-dir $HOME --no-create-home --gid adm --uid 1001 runner

          echo 'runner ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/runner

      - name: Install required packages
        run: |
          export DEBIAN_FRONTEND=noninteractive

          packages="\
            automake bc bsdmainutils bzip2 curl cvs default-jre \
            g++-multilib git jing libarchive-tools \
            libtool libxml2-utils libxslt1-dev make patch pkg-config rsync \
            shellcheck trang unzip wget xsltproc xvfb zsh"

          if ${{ matrix.mingw }}
          then
            packages="$packages g++-mingw-w64-i686 wine"

            # This is additionally required when using 32-bit builds, currently
            # do it unconditionally because our only MinGW build is 32 bits.
            sudo dpkg --add-architecture i386
            sudo apt-get -q -o=Dpkg::Use-Pty=0 update

            packages="$packages wine32"
          else
            packages="$packages libunwind-dev libdw-dev libgtk-3-dev"
          fi

          if [ "${{ matrix.compiler }}" = clang ]; then
            packages="$packages clang libc++abi-dev libc++-dev"
          fi

          # Work around for an apparent bug in either Debian slim Docker image
          # or JRE installation script: it tries to use this directory, which
          # doesn't exist, so create it preemptively.
          sudo mkdir -p /usr/share/man/man1

          sudo apt-get -qq install $packages

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: System and environment setup
        run: |
          normal_uid=`id --user`

          # The checkout actions runs as root and there doesn't seem to be any
          # way to change this, so just adjust the owner after checkout.
          sudo chown -R $normal_uid $GITHUB_WORKSPACE

          sudo sed -i'' -e 's/^int _putenv/_CRTIMP int _putenv/' /usr/share/libtool/build-aux/ltmain.sh

          echo "coefficiency=--jobs=`nproc`" >> $GITHUB_ENV
          if ${{ matrix.mingw }}
          then
            compiler=${LMI_TRIPLET}-${LMI_COMPILER}
          else
            compiler=${LMI_COMPILER}
          fi

          if [ "${{ matrix.compiler }}" = clang ]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++ -stdlib=libc++" >> $GITHUB_ENV
          fi

          gcc_version=$($compiler -dumpversion|tr -d '\r')
          echo "gcc_version=$gcc_version" >> $GITHUB_ENV

          echo "xml2_sha1=$(git rev-parse HEAD:third_party/libxml2)" >> $GITHUB_ENV
          echo "xmlwrapp_sha1=$(git rev-parse HEAD:third_party/xmlwrapp)" >> $GITHUB_ENV
          echo "xslt_sha1=$(git rev-parse HEAD:third_party/libxslt)" >> $GITHUB_ENV
          echo "wx_sha1=$(git rev-parse HEAD:third_party/wx)" >> $GITHUB_ENV
          echo "wxpdfdoc_sha1=$(git rev-parse HEAD:third_party/wxpdfdoc)" >> $GITHUB_ENV

          echo "PATH=$PATH:/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/bin" >> $GITHUB_ENV

          LD_LIBRARY_PATH=/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib
          LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/lmi/${LMI_COMPILER}_${LMI_TRIPLET}/build/ship
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV

          # Create directories required by lmi.
          for d in /opt/lmi /opt/lmi/print /etc/opt/lmi /srv/cache_for_lmi; do
            sudo mkdir --parents $d
            sudo --preserve-env chown $normal_uid $d
          done
          mkdir /srv/cache_for_lmi/downloads
          mkdir /opt/lmi/gui_test
          mkdir /opt/lmi/src

          echo "User information:"
          id
          echo

          echo "Environment:"
          env | sort
          echo

          echo "Compiler version:"
          $compiler --version
          echo

          if ${{ matrix.mingw }}; then
            echo "Wine version:"
            wine --version
            echo
          fi

      - name: Cache downloaded archives
        uses: actions/cache@v2
        with:
          # Using the hash of the makefile means that we're going to have
          # false negatives, i.e. re-download the files unnecessarily if the
          # makefile changes but the MD5 checksums of the files in it do not,
          # but this is much simpler than extracting those MD5s from it and it
          # changes rarely enough that this shouldn't be a problem in practice.
          path: /srv/cache_for_lmi/downloads
          key: miscellanea-${{ hashFiles('install_miscellanea.make') }}

      - name: Build miscellanea
        run: make $coefficiency --output-sync=recurse -f install_miscellanea.make

      - name: Cache third-party libraries
        id: cache-local
        uses: actions/cache@v2
        with:
          path: |
            /opt/lmi/local/${{ env.LMI_COMPILER }}_${{ env.LMI_TRIPLET }}
            /opt/lmi/local/include
            /opt/lmi/local/share
          key: local-${{ env.LMI_COMPILER }}-${{ env.gcc_version }}-${{ env.LMI_TRIPLET }}-${{ hashFiles('install_xml_libraries.sh', 'install_wx.sh', 'install_wxpdfdoc.sh') }}-${{ env.xml2_sha1 }}-${{ env.xmlwrapp_sha1 }}-${{ env.xslt_sha1 }}-${{ env.wx_sha1 }}-${{ env.wxpdfdoc_sha1 }}

      - name: Build XML libraries
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_xml_libraries.sh

      - name: Build wxWidgets
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wx.sh

      - name: Build wxPdfDoc
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wxpdfdoc.sh

      - name: Build Boost.Regex
        if: matrix.autotools
        run: |
          # Define flags to avoid warnings in Boost code we don't care about.
          boost_cxxflags="-Wno-deprecated-declarations -Wno-register -DBOOST_NO_AUTO_PTR -DBOOST_NO_STD_ALLOCATOR"
          if [ "${{ matrix.compiler }}" = clang ]; then
            boost_cxxflags="${boost_cxxflags} -Wno-parentheses-equality"
          fi

          for lib in regex; do
            cd /opt/lmi/third_party/src/boost/libs/${lib}/src
            echo "Compiling $lib sources"
            ${CXX-${LMI_COMPILER}} -std=c++17 -fPIC $(echo ${boost_cxxflags}) -I../../.. -c *.cpp
            echo "Creating libboost_${lib}.a from" *.o
            ar rc /opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib/libboost_${lib}.a *.o
          done

      - name: Configure lmi
        if: matrix.autotools
        run: |
          ./autogen.sh
          lmi_build_dir='ci-build'
          echo "lmi_build_dir=${lmi_build_dir}" >> $GITHUB_ENV
          mkdir ${lmi_build_dir}
          cd ${lmi_build_dir}

          # Disable optimizations just to make the build faster.
          ../configure --disable-optimize \
            CPPFLAGS=-I/opt/lmi/local/include \
            LDFLAGS=-L/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib \
            PKG_CONFIG_PATH=/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib/pkgconfig \
            --with-boost-headers=/opt/lmi/third_party/src/boost \
              || err=$?

          if [ -n "$err" ]; then
            echo '*** Configuring failed, contents of config.log follows: ***'
            echo '-----------------------------------------------------------'
            cat config.log
            echo '-----------------------------------------------------------'
            exit $err
          fi

      - name: Build lmi (autotools)
        if: matrix.autotools
        run: make --keep-going V=1 $coefficiency -C ${lmi_build_dir}

      - name: Build lmi
        run: make $coefficiency --output-sync=recurse
        if: matrix.autotools != true

      - name: Build lmi with SO attributes
        if: matrix.autotools != true
        run: make $coefficiency --output-sync=recurse build_type=so_test USE_SO_ATTRIBUTES=1 all

      - name: Setup lmi for tests
        run: |
          cat >/opt/lmi/data/configurable_settings.xml <<EOF
          <?xml version="1.0"?>
          <configurable_settings version="2">
            <calculation_summary_columns/>
            <census_paste_palimpsestically>1</census_paste_palimpsestically>
            <cgi_bin_log_filename>cgi_bin.log</cgi_bin_log_filename>
            <custom_input_0_filename>custom.ini</custom_input_0_filename>
            <custom_input_1_filename>custom.inix</custom_input_1_filename>
            <custom_output_0_filename>custom.out0</custom_output_0_filename>
            <custom_output_1_filename>custom.out1</custom_output_1_filename>
            <default_input_filename>/etc/opt/lmi/default.ill</default_input_filename>
            <libraries_to_preload/>
            <offer_hobsons_choice>0</offer_hobsons_choice>
            <print_directory>/opt/lmi/print</print_directory>
            <seconds_to_pause_between_printouts>10</seconds_to_pause_between_printouts>
            <skin_filename>skin.xrc</skin_filename>
            <spreadsheet_file_extension>.tsv</spreadsheet_file_extension>
            <use_builtin_calculation_summary>1</use_builtin_calculation_summary>
          </configurable_settings>
          EOF

          # Tests rely on the symlinks set up by this script, so run it.
          ./check_git_setup.sh

          # Copy a placeholder logo image.
          cp ./gwc/company_logo.png /opt/lmi/data/

          # Create authentication files.
          printf '2450449 2472011'                            >/opt/lmi/data/expiry
          printf '5fc68a795c9c60da1b32be989efc299a  expiry\n' >/opt/lmi/data/validated.md5
          printf '391daa5cbc54e118c4737446bcb84eea'           >/opt/lmi/data/passkey

      - name: Install
        if: matrix.autotools
        run: |
          env -C /opt/lmi/data $(pwd)/${lmi_build_dir}/product_files

          # These files are used by input test from this hardcoded location.
          cp \
            cell.xsd \
            multiple_cell_document.xsd \
            single_cell_document.xsd \
            sort_cell_subelements.xsl \
            types.xsd \
            /opt/lmi/data

      - name: Install
        if: matrix.autotools != true
        run: make install

      - name: Check concinnity
        if: matrix.autotools != true
        run: |
          # Somehow these files are executable and this triggers complaints
          # from check_script.sh, so avoid them by fixing permissions.
          chmod -x .git/info/exclude .git/description
          make $coefficiency check_concinnity

      - name: Check physical closure
        if: matrix.autotools != true
        run: make $coefficiency check_physical_closure

      - name: Run CLI tests
        if: matrix.autotools != true
        run: make $coefficiency cli_tests

      - name: Run unit tests (autotools)
        if: matrix.autotools
        run: |
          # Prepare for running tests.

          # global_settings_test relies on this file existence in the current directory
          touch ${lmi_build_dir}/global_settings.o

          make --keep-going V=1 $coefficiency -C ${lmi_build_dir} check || err=$?

          if [ -n "$err" ]; then
            if [ -f ${lmi_build_dir}/test-suite.log ]; then
                echo '*** Tests failed, contents of test-suite.log follows: ***'
                echo '-----------------------------------------------------------'
                cat ${lmi_build_dir}/test-suite.log
                echo '-----------------------------------------------------------'
            fi
            exit $err
          fi

      - name: Run unit tests
        if: matrix.autotools != true
        run: make $coefficiency unit_tests

      - name: Run GUI tests
        if: matrix.mingw
        run: |
            echo 'Launching Xvfb...'
            Xvfb :10 -screen 0 1600x1200x24 &
            num_tries=1
            while true; do
                if xset -d :10 -q >/dev/null 2>&1; then
                    echo 'Xvfb has become available.'
                    # Trying to use it immediately can still result in errors
                    # when creating the windows, somehow, so give it some time
                    # to settle.
                    sleep 3
                    break
                fi

                if [[ $num_tries -gt 10 ]]; then
                    echo 'Timed out waiting for Xvfb'
                    exit 1
                fi

                ((num_tries++))
                echo "Still waiting for Xvfb (attempt #$num_tries)"
                sleep 3
            done
            echo 'Launching the GUI test:'
            DISPLAY=:10 ./gui_test.sh
