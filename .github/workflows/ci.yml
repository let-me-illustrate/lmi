# Continuous integration workflow for lmi: build Linux and MSW binaries.
name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'gwc/**'
      - 'tabs/**'
      - 'vz/**'
      - 'lmi_setup*.sh'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'gwc/**'
      - 'tabs/**'
      - 'vz/**'
      - 'lmi_setup*.sh'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: debian:sid-slim
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: MSW/make/mingw64
            triplet: x86_64-w64-mingw32
            mingw: true
            gui_test: true
          - name: MSW/make/mingw64 (so_test)
            triplet: x86_64-w64-mingw32
            build_type: so_test
            mingw: true
          - name: Linux/make/gcc
          - name: Linux/make/gcc (so_test)
            build_type: so_test
          - name: Linux/autotools/gcc
            autotools: true
          - name: Linux/autotools/clang
            compiler: clang
            autotools: true
    env:
      LMI_COMPILER: ${{ matrix.compiler || 'gcc' }}
      LMI_TRIPLET: ${{ matrix.triplet || 'x86_64-pc-linux-gnu' }}

    # Run all commands as the normal user, created by the first step below.
    #
    # Note that the Bash options used here are the same as for the default
    # shell used by GitHub Actions to minimize any surprises.
    defaults:
      run:
        shell: /usr/bin/setpriv --reuid=runner --regid=adm --clear-groups --inh-caps=-all bash --noprofile --norc -eo pipefail {0}

    steps:
      - name: Set up container user
        # Specify the default shell explicitly to override the default value above.
        shell: bash
        run: |
          apt-get -q -o=Dpkg::Use-Pty=0 update
          apt-get -qq install sudo

          # Create a user with the same UID/GID and name as the existing user
          # outside of the container and allow it using sudo without password.
          useradd --home-dir "$HOME" --no-create-home --gid adm --uid 1001 runner

          echo 'runner ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/runner

      - name: Install required packages
        run: |
          export DEBIAN_FRONTEND=noninteractive

          packages=(
            automake bc bsdmainutils bzip2 curl cvs default-jre
            g++-multilib git jing libarchive-tools
            libtool libxml2-utils libxslt1-dev make patch pkg-config rsync
            shellcheck trang unzip wget xsltproc x11-xserver-utils xvfb zsh
          )

          if [ ${{ matrix.mingw }} ]
          then
            packages+=(g++-mingw-w64-x86-64 wine wine64)

            # Set WINEDEBUG to avoid annoying warnings about wine32 being
            # missing: this is not a problem in our case, we want to only
            # run 64-bit programs in this build, so set WINEDEBUG to a
            # value equivalent to its default/unset value but recognized
            # as disabling error output by Debian /usr/bin/wine script.
            echo 'WINEDEBUG=-all,err+all,fixme+all' >> "$GITHUB_ENV"
          else
            packages+=(libgtk-3-dev)
          fi

          # These packages are always installed when using the official
          # makefiles because they're required by the Linux version of
          # test_coding_rules used by make check_physical_closure target even
          # when building for MSW, but with autotools build we can avoid
          # installing them in the latter case.
          if [ -z "${{ matrix.autotools }}" -o -z "${{ matrix.mingw }}" ]; then
            # Those are never used with clang currently.
            if [ "${{ matrix.compiler }}" != clang ]; then
              # Instead of installing libunwind-NN-dev directly, install
              # libc++-dev depending on it, as the latter depends on the
              # former but has a version-independent name which doesn't need
              # to be updated with each clang release.
              packages+=(libc++-dev libdw-dev)
            fi
            packages+=(libpcre2-dev)
          fi

          if [ "${{ matrix.compiler }}" = clang ]; then
            packages+=(clang libc++abi-dev libc++-dev lld)
          fi

          # Work around for an apparent bug in either Debian slim Docker image
          # or JRE installation script: it tries to use this directory, which
          # doesn't exist, so create it preemptively.
          sudo mkdir -p /usr/share/man/man1

          sudo apt-get -qq install "${packages[@]}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install CCache
        uses: hendrikmuhs/ccache-action@v1.2.5
        with:
          key: ${{ matrix.compiler || 'gcc' }}-${{ matrix.triplet || 'x86_64-pc-linux-gnu' }}
          max-size: 900M
          verbose: 2

      - name: Set up build environment
        run: |
          normal_uid=$(id --user)

          # The checkout actions runs as root and there doesn't seem to be any
          # way to change this, so just adjust the owner after checkout.
          sudo chown -R "$normal_uid" "$GITHUB_WORKSPACE"

          sudo sed -i'' -e 's/^int _putenv/_CRTIMP int _putenv/' /usr/share/libtool/build-aux/ltmain.sh

          echo "coefficiency=--jobs=$(nproc)" >> "$GITHUB_ENV"

          CC=${LMI_COMPILER}
          case "$CC" in
            clang)
              CXX="clang++ -stdlib=libc++"
              ;;

            gcc)
              CXX="g++"
              ;;

            *)
              echo 'Unknown compiler specified.'
              exit 1
          esac

          if [ ${{ matrix.mingw }} ]
          then
            CC=${LMI_TRIPLET}-${CC}
            CXX=${LMI_TRIPLET}-${CXX}
          fi

          echo "CC=$CC" >> "$GITHUB_ENV"
          echo "CXX=$CXX" >> "$GITHUB_ENV"

          gcc_version=$($CC -dumpversion|tr -d '\r')
          echo "gcc_version=$gcc_version" >> "$GITHUB_ENV"

          echo "xml2_sha1=$(git rev-parse HEAD:third_party/libxml2)" >> "$GITHUB_ENV"
          echo "xmlwrapp_sha1=$(git rev-parse HEAD:third_party/xmlwrapp)" >> "$GITHUB_ENV"
          echo "xslt_sha1=$(git rev-parse HEAD:third_party/libxslt)" >> "$GITHUB_ENV"
          echo "wx_sha1=$(git rev-parse HEAD:third_party/wx)" >> "$GITHUB_ENV"
          echo "wxpdfdoc_sha1=$(git rev-parse HEAD:third_party/wxpdfdoc)" >> "$GITHUB_ENV"

          # Prepend the directory containing symlinks to the PATH: this allows
          # makefiles to work unchnaged and without defining CXX on the command
          # line. Note that MINIMAL_PATH is used in lmi makefiles to replace
          # the PATH, so we need to define it too.
          echo "PATH=/usr/lib/ccache:/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/bin:$PATH" >> "$GITHUB_ENV"
          echo "MINIMAL_PATH=/usr/lib/ccache:/usr/bin:/bin" >> "$GITHUB_ENV"

          LD_LIBRARY_PATH=/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib
          LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/lmi/${LMI_COMPILER}_${LMI_TRIPLET}/build/ship
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> "$GITHUB_ENV"

          # Create directories required by lmi.
          for d in /opt/lmi /opt/lmi/local /opt/lmi/print /etc/opt/lmi /srv/cache_for_lmi; do
            sudo mkdir --parents $d
            sudo --preserve-env chown "$normal_uid" $d
          done
          mkdir /srv/cache_for_lmi/downloads
          mkdir /opt/lmi/gui_test
          mkdir /opt/lmi/src

      - name: Show build environment
        run: |
          echo "User information:"
          id
          echo

          echo "Environment:"
          env | sort
          echo

          echo "Compiler version:"
          $CXX --version
          echo

          echo "Ccache version:"
          ccache --version
          echo

          if [ ${{ matrix.mingw }} ]; then
            echo "Wine version:"
            wine --version
            echo
          fi

      - name: Cache downloaded archives
        uses: actions/cache@v3
        with:
          # Using the hash of the makefile means that we're going to have
          # false negatives, i.e. re-download the files unnecessarily if the
          # makefile changes but the MD5 checksums of the files in it do not,
          # but this is much simpler than extracting those MD5s from it and it
          # changes rarely enough that this shouldn't be a problem in practice.
          path: /srv/cache_for_lmi/downloads
          key: miscellanea-${{ hashFiles('install_miscellanea.make') }}

      - name: Build miscellanea
        run: make $coefficiency --output-sync=recurse -f install_miscellanea.make

      - name: Cache third-party libraries
        id: cache-local
        uses: actions/cache@v3
        with:
          path: |
            /opt/lmi/local/${{ env.LMI_COMPILER }}_${{ env.LMI_TRIPLET }}
            /opt/lmi/local/include
            /opt/lmi/local/share
          key: local-${{ env.LMI_COMPILER }}-${{ env.gcc_version }}-${{ env.LMI_TRIPLET }}-${{ hashFiles('install_xml_libraries.sh', 'install_wx.sh', 'install_wxpdfdoc.sh') }}-${{ env.xml2_sha1 }}-${{ env.xmlwrapp_sha1 }}-${{ env.xslt_sha1 }}-${{ env.wx_sha1 }}-${{ env.wxpdfdoc_sha1 }}

      - name: Build XML libraries
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_xml_libraries.sh

      - name: Build wxWidgets
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wx.sh

      - name: Build wxPdfDoc
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wxpdfdoc.sh

      - name: Configure lmi
        if: matrix.autotools
        run: |
          ./autogen.sh
          lmi_build_dir='ci-build'
          echo "lmi_build_dir=${lmi_build_dir}" >> "$GITHUB_ENV"
          mkdir ${lmi_build_dir}
          cd ${lmi_build_dir}

          # Disable optimizations just to make the build faster.
          ../configure --disable-optimize \
            CPPFLAGS=-I/opt/lmi/local/include \
            LDFLAGS="-L/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib" \
            PKG_CONFIG_PATH="/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib/pkgconfig" \
              || err=$?

          if [ -n "$err" ]; then
            echo '*''** Configuring failed, contents of config.log follows: *''**'
            echo '-----------------------------------------------------------'
            cat config.log
            echo '-----------------------------------------------------------'
            exit "$err"
          fi

      - name: Build lmi
        run: |
          if [ ${{ matrix.autotools }} ]; then
            make --keep-going V=1 $coefficiency -C ${lmi_build_dir}
          else
            if [ -n "${{ matrix.build_type }}" ]; then
              build_type_arg=build_type=${{ matrix.build_type }}
            fi
            make $coefficiency --output-sync=recurse $build_type_arg
          fi

      - name: Setup lmi for tests
        run: |
          ./bland_configurable_settings.sh /opt/lmi/data

          # Tests rely on the symlinks set up by this script, so run it.
          ./check_git_setup.sh

          # Copy a placeholder logo image.
          cp ./gwc/company_logo.png /opt/lmi/data/

          # Create authentication files.
          printf '2450449 2472011'                            >/opt/lmi/data/expiry
          printf '5fc68a795c9c60da1b32be989efc299a  expiry\n' >/opt/lmi/data/validated.md5
          printf '391daa5cbc54e118c4737446bcb84eea'           >/opt/lmi/data/passkey

      - name: Install
        run: |
          if [ ${{ matrix.autotools }} ]; then
            env -C /opt/lmi/data $(pwd)/${lmi_build_dir}/product_files

            # These files are used by input test from this hardcoded location.
            cp \
              cell.xsd \
              multiple_cell_document.xsd \
              single_cell_document.xsd \
              sort_cell_subelements.xsl \
              types.xsd \
              /opt/lmi/data
          else
            make install
          fi

      - name: Check concinnity and physical closure
        if: matrix.autotools != true
        run: |
          # Somehow these files are executable and this triggers complaints
          # from check_script.sh, so avoid them by fixing permissions.
          chmod -x .git/info/exclude .git/description
          make $coefficiency LMI_COMPILER=gcc LMI_TRIPLET=x86_64-pc-linux-gnu check_concinnity

          make $coefficiency check_physical_closure

      - name: Run CLI tests
        if: matrix.autotools != true
        run: make $coefficiency cli_tests

      - name: Run unit tests
        run: |
          if [ ${{ matrix.autotools }} ]; then
            make --keep-going V=1 "$coefficiency" -C "${lmi_build_dir}" check || err=$?

            if [ -n "$err" ]; then
              if [ -f "${lmi_build_dir}/test-suite.log" ]; then
                  echo '*''** Tests failed, contents of test-suite.log follows: *''**'
                  echo '-----------------------------------------------------------'
                  cat "${lmi_build_dir}/test-suite.log"
                  echo '-----------------------------------------------------------'
              fi
              exit "$err"
            fi
          else
            make "$coefficiency" unit_tests
          fi

      - name: Launch Xvfb
        if: matrix.gui_test
        run: |
            sudo mkdir /tmp/.X11-unix
            sudo chmod 1777 /tmp/.X11-unix
            Xvfb :10 -screen 0 1600x1200x24 &
            num_tries=1
            while true; do
                if xset -d :10 -q >/dev/null 2>&1; then
                    echo 'Xvfb has become available.'
                    # Trying to use it immediately can still result in errors
                    # when creating the windows, somehow, so give it some time
                    # to settle.
                    sleep 3
                    break
                fi

                if [[ $num_tries -gt 10 ]]; then
                    echo 'Timed out waiting for Xvfb'
                    exit 1
                fi

                ((num_tries++))
                echo "Still waiting for Xvfb (attempt #$num_tries)"
                sleep 3
            done
            echo 'DISPLAY=:10' >> "$GITHUB_ENV"

      - name: Run GUI tests
        if: matrix.gui_test
        run: |
            . ./set_toolchain.sh
            $PERFORM /opt/lmi/bin/wx_test"$EXEEXT" --ash_nazg --data_path=/opt/lmi/data
