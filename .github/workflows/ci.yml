# Continuous integration workflow for lmi: build Linux and MSW binaries.
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-msw32-cross:
    runs-on: ubuntu-20.04
    name: Cross-compile for MSW-32
    env:
      LMI_COMPILER: gcc
      LMI_TRIPLET: i686-w64-mingw32

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install required packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get dist-upgrade -o APT::Immediate-Configure=0 # Avoid configuration error later
          sudo apt-get --assume-yes install \
            automake bc bsdmainutils bzip2 curl cvs default-jre \
            g++-mingw-w64-i686 g++-multilib git jing libarchive-tools \
            libtool libxml2-utils libxslt1-dev make patch pkg-config rsync \
            shellcheck sudo trang unzip wget wine32 xsltproc

      - name: Fix up libtool
        run: sudo sed -i'' -e 's/^int _putenv/_CRTIMP int _putenv/' /usr/share/libtool/build-aux/ltmain.sh

      - name: Set environment variables
        run: |
          echo "NORMAL_UID=`id --user`" >> $GITHUB_ENV
          echo "coefficiency=--jobs=`nproc`" >> $GITHUB_ENV
          gcc_version=$(${LMI_TRIPLET}-${LMI_COMPILER} -dumpversion|tr -d '\r')
          echo "gcc_version=$gcc_version" >> $GITHUB_ENV

      - name: Create lmi directories
        run: >
          for d in /opt/lmi /etc/opt/lmi /srv/cache_for_lmi; do
            sudo mkdir --parents $d;
            sudo --preserve-env chown $NORMAL_UID $d;
          done;
          mkdir /srv/cache_for_lmi/downloads

      - name: Cache downloaded archives
        uses: actions/cache@v2
        with:
          # Use combined key for files downloaded by both makefiles, even
          # though this means that we would redownload the same files from the
          # unchanged makefile if only one of them changes -- but they don't
          # change often enough to make this a real problem in practice.
          path: /srv/cache_for_lmi/downloads
          key: downloads-${{ hashFiles('install_miscellanea.make') }}-${{ hashFiles('install_libxml2_libxslt.make') }}

      - name: Build miscellanea
        run: make $coefficiency --output-sync=recurse -f install_miscellanea.make

      - name: Cache libxml2, wxWidgets and wxPdfDoc
        id: cache-local
        uses: actions/cache@v2
        with:
          path: |
            /opt/lmi/local/${{ env.LMI_COMPILER }}_${{ env.LMI_TRIPLET }}
            /opt/lmi/local/include
            /opt/lmi/local/share
          key: build-${{ env.LMI_COMPILER }}-${{ env.gcc_version }}-${{ env.LMI_TRIPLET }}-${{ hashFiles('install_libxml2_libxslt.sh', 'install_wx.sh', 'install_wxpdfdoc.sh') }}

      - name: Build libxml2
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_libxml2_libxslt.sh

      - name: Build wxWidgets
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wx.sh

      - name: Build wxPdfDoc
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wxpdfdoc.sh

      - name: Build lmi
        run: make $coefficiency --output-sync=recurse install

      - name: Build lmi with SO attributes
        run: make $coefficiency --output-sync=recurse build_type=so_test USE_SO_ATTRIBUTES=1 all
