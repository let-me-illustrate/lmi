# Continuous integration workflow for lmi: build Linux and MSW binaries.
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-msw32-cross:
    runs-on: ubuntu-20.04
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: Cross-compile for MSW-32
            triplet: i686-w64-mingw32
            mingw: true
          - name: Native Linux build
            triplet: x86_64-pc-linux-gnu
            mingw: false
    env:
      LMI_COMPILER: gcc
      LMI_TRIPLET: ${{ matrix.triplet }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install Wine
        if: matrix.mingw
        run: |
          sudo dpkg --add-architecture i386

          wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
          sudo add-apt-repository "deb https://dl.winehq.org/wine-builds/ubuntu $(lsb_release -cs) main"

          sudo apt-get update

          # Workaround the issue with Wine.
          sudo apt-get install libasound2-plugins:i386 libgphoto2-6:i386
          sudo apt-get install wine-stable-i386
          sudo apt-get install wine-stable
          sudo apt-get install --install-recommends winehq-stable

      - name: Install required packages
        run: |
          sudo apt-get --assume-yes install \
            automake bc bsdmainutils bzip2 curl cvs default-jre \
            g++-multilib git jing libarchive-tools \
            libtool libxml2-utils libxslt1-dev make patch pkg-config rsync \
            shellcheck sudo trang unzip wget xsltproc xvfb zsh

          if ${{ matrix.mingw }}
          then
            sudo apt-get --assume-yes install \
              g++-mingw-w64-i686
          else
            sudo apt-get --assume-yes install \
              libgtk-3-dev
          fi

      - name: Fix up libtool
        run: sudo sed -i'' -e 's/^int _putenv/_CRTIMP int _putenv/' /usr/share/libtool/build-aux/ltmain.sh

      - name: Set environment variables
        run: |
          echo "NORMAL_UID=`id --user`" >> $GITHUB_ENV
          echo "coefficiency=--jobs=`nproc`" >> $GITHUB_ENV
          if ${{ matrix.mingw }}
          then
            compiler=${LMI_TRIPLET}-${LMI_COMPILER}
          else
            compiler=${LMI_COMPILER}
          fi
          gcc_version=$($compiler -dumpversion|tr -d '\r')
          echo "gcc_version=$gcc_version" >> $GITHUB_ENV

          echo "xml2_sha1=$(git rev-parse HEAD:third_party/libxml2)" >> $GITHUB_ENV
          echo "xmlwrapp_sha1=$(git rev-parse HEAD:third_party/xmlwrapp)" >> $GITHUB_ENV
          echo "xslt_sha1=$(git rev-parse HEAD:third_party/libxslt)" >> $GITHUB_ENV

          echo "PATH=$PATH:/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/bin" >> $GITHUB_ENV

          LD_LIBRARY_PATH=/opt/lmi/local/${LMI_COMPILER}_${LMI_TRIPLET}/lib
          LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/lmi/${LMI_COMPILER}_${LMI_TRIPLET}/build/ship
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Create lmi directories
        run: |
          for d in /opt/lmi /opt/lmi/print /etc/opt/lmi /srv/cache_for_lmi; do
            sudo mkdir --parents $d
            sudo --preserve-env chown $NORMAL_UID $d
          done
          mkdir /srv/cache_for_lmi/downloads
          mkdir /opt/lmi/gui_test
          mkdir /opt/lmi/src

      - name: Cache downloaded archives
        uses: actions/cache@v2
        with:
          # Using the hash of the makefile means that we're going to have
          # false negatives, i.e. re-download the files unnecessarily if the
          # makefile changes but the MD5 checksums of the files in it do not,
          # but this is much simpler than extracting those MD5s from it and it
          # changes rarely enough that this shouldn't be a problem in practice.
          path: /srv/cache_for_lmi/downloads
          key: downloads-${{ hashFiles('install_miscellanea.make') }}

      - name: Build miscellanea
        run: make $coefficiency --output-sync=recurse -f install_miscellanea.make

      - name: Cache third-party libraries
        id: cache-local
        uses: actions/cache@v2
        with:
          path: |
            /opt/lmi/local/${{ env.LMI_COMPILER }}_${{ env.LMI_TRIPLET }}
            /opt/lmi/local/include
            /opt/lmi/local/share
          key: build-${{ env.LMI_COMPILER }}-${{ env.gcc_version }}-${{ env.LMI_TRIPLET }}-${{ hashFiles('install_xml_libraries.sh', 'install_wx.sh', 'install_wxpdfdoc.sh') }}-${{ env.xml2_sha1 }}-${{ env.xmlwrapp_sha1 }}-${{ env.xslt_sha1 }}

      - name: Build XML libraries
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_xml_libraries.sh

      - name: Build wxWidgets
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wx.sh

      - name: Build wxPdfDoc
        if: steps.cache-local.outputs.cache-hit != 'true'
        run: ./install_wxpdfdoc.sh

      - name: Build lmi
        run: make $coefficiency --output-sync=recurse

      - name: Build lmi with SO attributes
        run: make $coefficiency --output-sync=recurse build_type=so_test USE_SO_ATTRIBUTES=1 all

      - name: Setup lmi for tests
        run: |
          cat >/opt/lmi/data/configurable_settings.xml <<EOF
          <?xml version="1.0"?>
          <configurable_settings version="2">
            <calculation_summary_columns/>
            <census_paste_palimpsestically>1</census_paste_palimpsestically>
            <cgi_bin_log_filename>cgi_bin.log</cgi_bin_log_filename>
            <custom_input_0_filename>custom.ini</custom_input_0_filename>
            <custom_input_1_filename>custom.inix</custom_input_1_filename>
            <custom_output_0_filename>custom.out0</custom_output_0_filename>
            <custom_output_1_filename>custom.out1</custom_output_1_filename>
            <default_input_filename>/etc/opt/lmi/default.ill</default_input_filename>
            <libraries_to_preload/>
            <offer_hobsons_choice>0</offer_hobsons_choice>
            <print_directory>/opt/lmi/print</print_directory>
            <seconds_to_pause_between_printouts>10</seconds_to_pause_between_printouts>
            <skin_filename>skin.xrc</skin_filename>
            <spreadsheet_file_extension>.tsv</spreadsheet_file_extension>
            <use_builtin_calculation_summary>1</use_builtin_calculation_summary>
          </configurable_settings>
          EOF

          # Tests rely on the symlinks set up by this script, so run it.
          ./check_git_setup.sh

          # Copy a placeholder logo image.
          cp ./gwc/company_logo.png /opt/lmi/data/

          # Create authentication files.
          printf '2450449 2472011'                            >/opt/lmi/data/expiry
          printf '5fc68a795c9c60da1b32be989efc299a  expiry\n' >/opt/lmi/data/validated.md5
          printf '391daa5cbc54e118c4737446bcb84eea'           >/opt/lmi/data/passkey

      - name: Install
        run: make install

      - name: Check concinnity
        run: make $coefficiency check_concinnity

      - name: Check physical closure
        run: make $coefficiency check_physical_closure

      - name: Run CLI tests
        run: make $coefficiency cli_tests

      - name: Run unit tests
        run: |
          if [ !${{ matrix.mingw }} ]
          then
            # Currently failing tests.
            exclude_args="excluded_unit_test_targets=path_utility_test"
          fi
          make $coefficiency unit_tests $exclude_args

      - name: Run GUI tests
        if: matrix.mingw
        run: xvfb-run ./gui_test.sh
