  # Work with proprietary repository (prerequisite: 'develop0.txt')
  #
  # Discussed in detail here:
  #   https://lists.nongnu.org/archive/html/lmi/2016-03/msg00031.html

  # Initial setup: create a working copy, cloned from the
  # already-provided "blessed" repo (only if necessary--this
  # should already have been done automatically in any chroot) ...

cd /opt/lmi
git clone file:///srv/cache_for_lmi/blessed/proprietary

  # ...then make sure it's set up as intended:

cd /opt/lmi/proprietary
./check_git_setup.sh

  # ...and do that also when migrating to a new machine, in case a
  # working copy was transferred by simplistic means.

  # Create a bundle to share by email

  # After verifying proper setup as above, make some changes, then
  # commit them in whatever batches make sense (see the section
  # "When committing fails" below if anything goes wrong)

cd /opt/lmi/proprietary
  # [commit selected files by name...]
git commit one_file another_file -m"One set of changes"
  # [...or commit all changes]
git commit --all -m"Another set of changes"

  # When everything is ready to share...

cd /opt/lmi/proprietary
git bundle create YourBundleName origin/master..HEAD
  # for example (substitute your own initials)
git bundle create /srv/cache_for_lmi/blessed/$(date -u +'%Y%m%dT%H%MZ')-gwc.bundle origin/master..HEAD

  # Email that bundle, then push the changes to your "blessed" repository

git push

  # When you receive a bundle in email...

cd /opt/lmi/proprietary
git bundle verify /path/where/you/saved/TheirBundleName
git pull /path/where/you/saved/TheirBundleName master

  # ...then synchronize your "blessed" repository with your correspondent's

git push

  # Synchronize remote from local proprietary repository

  # determine the latest commit present on the remote machine

cd /opt/lmi/proprietary
git rev-parse master

  # ...and paste that SHA1 into this command on the local machine

cd /opt/lmi/proprietary
git bundle create YourCatchupBundleName PASTED..master
  # for example (assuming the remote's 'master' is e5094a5a820)
git bundle create /srv/cache_for_lmi/blessed/$(date -u +'%Y%m%dT%H%MZ')-catchup.bundle e5094a5a820^..master

  # ...and then, on the remote machine, verify and pull it as for
  # "When you receive a bundle in email" above; finally, copy its
  # source code into the directory used by the compiler:

cp -ia src/* /opt/lmi/src/products/src

  # Synchronize origin on one machine with multiple chroots

  # Create a bare repository on the host. Use that as 'origin' for
  # the local repository in each chroot (which already identity-mounts
  # the 'origin' directory). When a bundle is received, update it like
  # this...

cd /srv/cache_for_lmi/blessed/proprietary
git fetch ../whatever.bundle master:master

  # ...because 'git pull' can't be used in a bare repository. Then,
  # 'git pull' in each chroot will DTRT.

  # Compare files against proprietary repository

  # 'meld' is arguably less clunky than 'netrw'. It's not installed
  # in chroots by default because it's easy enough, and more flexible,
  # to run it on the host.

  # Compare source files

meld /srv/chroot/lmi_bookworm_5/opt/lmi/src/products/src /srv/chroot/lmi_bookworm_5/opt/lmi/proprietary/src &

  # Compare data files

meld /srv/chroot/lmi_bookworm_5/opt/lmi/data /srv/chroot/lmi_bookworm_5/opt/lmi/proprietary/data &

  # Compare system-test files

meld /srv/chroot/lmi_bookworm_5/opt/lmi/test /srv/chroot/lmi_bookworm_5/opt/lmi/proprietary/test &

  # Whenever a rate table changes, regenerate the binary database

cd /opt/lmi/data
rm proprietary.dat proprietary.ndx
  # native:
/opt/lmi/bin/rate_table_tool --accept --file=proprietary --merge=/opt/lmi/proprietary/tables
/opt/lmi/bin/rate_table_tool --accept --file=proprietary --verify
  # msw cross build:
wine /opt/lmi/bin/rate_table_tool.exe --accept --file=proprietary --merge=/opt/lmi/proprietary/tables
wine /opt/lmi/bin/rate_table_tool.exe --accept --file=proprietary --verify

  # To recover from errors

  # As long as git hooks are set up correctly, every commit is tested
  # for common problems, and fails if any are found. These commands:
  #   ./check_git_setup.sh
  #   ./hooks/pre-commit
  # help to diagnose or fix such failures.

  # To update copyright notices annually

  # Source files are so few that it's expedient to treat them manually
  # by editing all files in
  #   /opt/lmi/proprietary/.
  #   /opt/lmi/proprietary/src/
  #   /opt/lmi/proprietary/hooks/
  #   /opt/lmi/proprietary/test/ChangeLog
  # and adding the current year to each copyright notice, using an
  # expression such as
  #   /Copyright/s/202X/202X, 202Y/
  # (of course modifying the 'X' and 'Y' years), e.g.:

cd /opt/lmi/proprietary/
for z in $(grep -l -dskip Copyright *); do sed -i $z -e'/Copyright/s/2019/2019, 2020/'; done

cd /opt/lmi/proprietary/src
for z in $(grep -l -dskip Copyright *); do sed -i $z -e'/Copyright/s/2019/2019, 2020/'; done

cd /opt/lmi/proprietary/hooks
for z in $(grep -l -dskip Copyright *); do sed -i $z -e'/Copyright/s/2019/2019, 2020/'; done

cd /opt/lmi/proprietary/test
for z in ChangeLog ; do sed -i $z -e'/Copyright/s/2019/2019, 2020/'; done

  # Regenerating XML product files in /opt/lmi/data updates their
  # copyright notices automatically to show the current year.
  # (Historical years aren't necessary for these generated files.)
  # To produce the same effect in the proprietary repository,
  # run a command such as the following (of course modifying the
  # 'X' and 'Y' years):

cd /opt/lmi/proprietary/data/
for z in *; do sed -i $z -e'/Copyright/s/202X/202Y/'; done

  # and compare to the regenerated set in /opt/lmi/data

  # Use the same command to update rate tables similarly:

cd /opt/lmi/proprietary/tables
for z in *; do sed -i $z -e'/Copyright/s/202X/202Y/'; done

  # and regenerate the binary database.

  # Files in the test/ subdirectory (except test/ChangeLog treated
  # above) need not be updated: they aren't distributed and need no
  # current copyright notice.
