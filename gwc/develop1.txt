  # Set up my customary working environment (prerequisite: 'develop0.txt')

  # Work with multiple screens
  #
  # Only a few commands are used in each screen
  # often they're readily selectable from history

  # First screen: only for committing to repository

  # Initialize session

cd /opt/lmi/src/lmi

  [paste these lines individually...]
eval `ssh-agent`
ssh-agent $SHELL
ssh-add ~/.ssh/id_rsa
  [... then enter passphrase]

  # At end of session, terminate ssh so that no one can impersonate you

ssh-add -D
ssh-agent -k > /dev/null 2>&1

  # In between...
  # ...commit and push changes to git

git commit one_file another_file -m"One set of changes"
git commit --all -m"Another set of changes"
git push

  # ...commit only up through {second-to-last; a specific} commit

git push origin HEAD^1:master
git push origin SHA1:master

  # ...commit a change to cvs repository

export CVS_RSH="ssh"
export CVSROOT="{USER}{AT_SIGN}cvs.sv.gnu.org:/web/lmi"
cvs commit -m "Modify foo webpage" bar.html

  # ...rename a file
  # [for git, prefer to rename a file without changing its contents]
  # [for cvs, add the new and delete the old]

git mv lmi.rc lmi_msw_res.rc

  # Reuse commit message when commit originally failed

git commit --edit --file=.git/COMMIT_EDITMSG -- [files]

  # Regex for conflict markers

^[<=>]\{7\}\( \|$\)

  # Make a patch against repository from local tree

git diff file0.cpp file1.cpp >some_new_file

  # Apply an email patch

git am --scissors /path/to/patch

  # Apply a patch by merging from a remote: first, view all remotes...

git remote -v

  # ...and set up the remote if needed (one time only)...

git remote add xanadu https://github.com/vadz/lmi.git

  # ...then update the remote...

git fetch xanadu

  # ...and cherry-pick the "pull request":

git cherry-pick ..xanadu/name_of_pull_request

  # Alternatively, to cherry-pick from an online repository not set up
  # as a remote:

git fetch https://github.com/thesiv/lmi.git wsl
git branch ilya-wsl FETCH_HEAD

  # example for a branch with two commits:

git fetch https://github.com/thesiv/lmi.git speed_up_mvc_controller
git branch ilya-mvc FETCH_HEAD
git cherry-pick b7aa9bd5
git cherry-pick 8e247c13

  # Commit to a digressionary branch...

  # See:
  #   https://lists.nongnu.org/archive/html/lmi/2018-03/msg00082.html
  # I use branch-name prefix 'odd/', e.g., 'odd/1e24-vs-1e24L'

  # ...for pure divagations

git branch odd/foo
git switch odd/foo
  or
git switch --create odd/foo
  (instead of separate git-branch and git-switch commands)
git commit sandbox_test.cpp
git switch master
git push origin odd/foo

  # to transplant unpushed commits to a new branch--see:
  #   https://lists.nongnu.org/archive/html/lmi/2020-09/msg00034.html
  # this git-branch command creates a new branch with the given name,
  # which points to HEAD; but it does not switch to that branch...
git branch odd/foo
  # ...and therefore this git-reset command affects the current
  # branch (e.g., 'master'), but does not affect the new branch:
git reset --keep origin/master
  # specify upstream on the first push (ignore if it's never pushed)
git push --set-upstream origin odd/foo
  # ...and, if that branch is (later) to be rebased on 'master', be
  # sure to use either '--no-fork-point' or an explicit branch name.
  #
  # Alternatively, instead of the above commands, use the following:
  # ...create and switch to a new branch (for unpushed commits)...
git switch --create odd/foo
  # ...add any further commits...
git commit whatever.cpp
  # ...specify upstream on first push, as above...
git push --set-upstream origin odd/foo
  # ...then awaken from the dream...
git switch master
  # ...and forget it, if desired, as above...
git reset --keep origin/master

  # (to copy to a subdir before deletion, so it's in permanent history)
  # (this works only if all modified files are unique to the branch)
git checkout master
git format-patch --output-directory=/tmp/patch/ master..odd/foo
git am --directory=gwc /tmp/patch/*
  # (to expunge branch if later cherry-picked)
git branch --delete odd/foo
git push origin --delete odd/foo

  # ...for failing unit tests that are to be...

git branch odd/foo
git switch odd/foo
git commit miscellany_test.cpp -m"Add a failing unit test"
  # ...corrected later (see:
  #   https://lists.nongnu.org/archive/html/lmi/2018-03/msg00084.html
  # for a git-merge alternative)
git switch master
git cherry-pick --no-commit ..odd/foo
git commit miscellany.cpp miscellany_test.cpp -m"Enhance to pass new unit test"
git push origin odd/foo

  # Discard local changes to particular files

git checkout -- ce_skin_name.cpp ce_skin_name.hpp

  # Roll a file back to an earlier revision

git checkout [sha1sum] census_view.cpp
git checkout HEAD^ census_view.cpp

  # Obliterate unstaged changes

git checkout .

  # Switch locally to a particular SHA1

git switch --detach [sha1sum]

  # ...and undo that switch (after stashing any changes)

git switch -

  # Obliterate unpushed commits

git reset --hard origin/master

  # Update the local source tree (where I make my own changes) when
  # someone else has committed a change to the online master repo.

git remote -v update
git pull

  # If that yields "fatal: Not possible to fast-forward, aborting":

git pull --rebase

  # Update local submodules that have been changed on a remote origin.

git pull
git submodule update

  # If msw sets an incorrect executable bit, and you accidentally
  # commit it (without first running 'make check_concinnity', which
  # would catch the error), fix it thus:

git add --chmod=+x some-file-name
git add --chmod=-x some-file-name

  # Show branch topology (last 200 commits, e.g.)

git log -200 --graph --oneline --all --full-history
git log -200 --graph --oneline --all --simplify-by-decoration

  # Show git's file permissions

git ls-files --stage -- gwc/*.sh |less

  # Second screen: only for updating local shadow copy of repository
  #
  # I use the last line repeatedly to keep my local shadow copy current

cd /lmi/mirror/lmi
git remote -v update
git pull

  # Similarly, for webpages repository

cd /lmi/mirror/web
export CVS_RSH="ssh"
export CVSROOT="{USER}{AT_SIGN}cvs.sv.gnu.org:/web/lmi"
cvs -z3 update -l lmi

  # Set mirror timestamps to match working directory's
  #
  # ...for git:

for z in * ; do [ -f $z ] && ( [ $z -nt /opt/lmi/src/lmi/$z ] || [ $z -ot /opt/lmi/src/lmi/$z ] ) && touch --reference=/opt/lmi/src/lmi/$z $z; done

  # But that's slow, so touch only files changed since the last pull:

for z in $(git diff HEAD@{1} --name-only) ; do touch --reference=/opt/lmi/src/lmi/$z $z; done

  # Alternatively, in source rather than mirror directory, especially
  # after 'git checkout' to undo local modifications:
for z in *(m-1) ; do touch --reference=$z /opt/lmi/free/src/lmi/$z; done

  # Alternatively:
find . -path ./.git -prune -o -type f -print0 | xargs --null --max-procs="$(nproc)" --replace='{}' touch '--reference=/opt/lmi/src/lmi/{}' '{}'

  # Third screen: only for building and testing

cd /opt/lmi/src/lmi

make $coefficiency install check_physical_closure >../log 2>&1
make $coefficiency cgi_tests cli_tests >../log 2>&1
make $coefficiency system_test >../log 2>&1
make $coefficiency unit_tests 2>&1 | tee >(grep '\*\*\*') >(grep '????') >(grep '!!!!' --count | xargs printf '%d tests succeeded\n') >../log

  # other build types

make $coefficiency all build_type=so_test 2>&1 |less -S
make $coefficiency cgi_tests cli_tests build_type=safestdlib  2>&1 |less -S
make $coefficiency unit_tests build_type=safestdlib 2>&1 | tee >(grep '\*\*\*') >(grep '????') >(grep '!!!!' --count | xargs printf '%d tests succeeded\n') >../log

  # Run a single unit test

make $coefficiency unit_tests unit_test_targets=regex_test >../log 2>&1

  # Build with a compiler other than gcc

make -f bcc_5_5_1.make $coefficiency unit_tests >../log 2>&1
make -f como.make $coefficiency unit_tests >../log 2>&1

  # Build wx and wxpdfdoc

make $coefficiency --output-sync=recurse -f install_wx.make >../log 2>&1
make $coefficiency --output-sync=recurse -f install_wxpdfdoc.make >../log 2>&1

  # Shift differing system-test files among directories:
pushd /opt/lmi/touchstone && d="/opt/lmi/touchstone-old/touchstone-$(date -u +'%Y%m%dT%H%MZ')" && mkdir -p $d && for z in *; do cmp --quiet $z ../test/$z || ( mv $z $d/$z; mv ../test/$z ./$z; ) ; done && popd

  # Validate xrc files

export jar_dir=/opt/lmi/third_party/rng
java -jar $jar_dir/jing.jar -c xrc.rnc *.xrc 2>&1 |less -S -N

  # Expose menu-toolbar dissimilarities: expect zero lines on stdout

<toolbar.xrc sed -e'/^        /!d' -e'N;N;s/\n//g' -e's/^        //' -e's/tooltip/label/g' -e's/longhelp/help/g' |sort >/tmp/t.txt
<menus.xrc sed -e'/<label>/s/_//' -e'/<label>/s/\\t.*</</' -e '/^        <\(label\|bitmap\|help\)/!d' -e'N;N;s/\n//g' -e'/object/d' -e's/^        //' -e's/platform="win" //' -e's/Contents/Help/' -e's/\.\.\.</</' |sort | uniq >/tmp/m.txt
diff --unified=0 /tmp/m.txt /tmp/t.txt |sed -e'/^[+][+][+]/d' -e'/^@/d' -e'/^-/d'

  # Test xml schemata

pushd /tmp; /opt/lmi/src/lmi/test_schemata.sh >/opt/lmi/src/log 2>&1; popd

  # Fourth screen: only for checking

cd /opt/lmi/src/lmi

make $coefficiency LMI_COMPILER=gcc LMI_TRIPLET=x86_64-pc-linux-gnu check_concinnity >../log 2>&1
sed -f diagnostics.sed ../log 2>&1 |less -S

  # Fifth screen: only for running lmi and its GUI tests

cd /opt/lmi/bin
./lmi_wx_shared --ash_nazg --data_path=/opt/lmi/data

  # Run GUI tests

./wx_test.exe --ash_nazg --data_path=/opt/lmi/data

  # Run a particular GUI test

./wx_test.exe --ash_nazg --data_path=/opt/lmi/data --test paste_census

  # Show tabbed-dialog dimensions on statusbar

./lmi_wx_shared --ash_nazg --data_path=/opt/lmi/data --pyx=show_mvc_dims

  # Validate products

./lmi_cli_shared --ash_nazg --data_path=/opt/lmi/data --test_db 2>&1 |less

  # Test all valid emission types

/opt/lmi/bin/lmi_cli_shared --file=/opt/lmi/src/lmi/sample.ill --accept --ash_nazg --data_path=/opt/lmi/data --emit=emit_test_data,emit_spreadsheet,emit_text_stream,emit_custom_0,emit_custom_1  2>&1 |less -S
/opt/lmi/bin/lmi_cli_shared --file=/opt/lmi/src/lmi/sample.cns --accept --ash_nazg --data_path=/opt/lmi/data --emit=emit_test_data,emit_spreadsheet,emit_group_roster,emit_text_stream,emit_custom_0,emit_custom_1  2>&1 |less -S
popd

  # Miscellany (no particular screen)

cd /opt/lmi/src/lmi

  # Useful vim commands that are not readily remembered

  # Find long lines

/\%>80v.\+

  # Change column 41 to a comma, for non-matching lines in a range
  # ('|41' seems incompatible with '|' separator, so use 'cursor')

:'<,'>g!/xyzzy/call cursor (0,41) | norm r,

  # In a range, copy each matching line, appending "_term" to the copy

:'<,'>g/^    ,/ copy . | s/^    ,[^ ]*/&_term

  # All other...

  # Identify source files not encoded compatibly with UTF-8

for z in *.?pp; (iconv -f UTF-8 -t UTF-8 $z &>/dev/null || echo $z)

  # Convert to UTF-8

cp -a product_data.cpp eraseme
iconv -f ISO-8859-1 -t UTF-8 eraseme > product_data.cpp

  # Check spelling

https://lists.nongnu.org/archive/html/lmi/2015-10/msg00076.html

  # Test reinstallation; compare logs

mkdir --parents /opt/lmi/logs
logfile=/opt/lmi/logs/log-$(date -u +'%Y%m%dT%H%MZ'); echo "Log file is '$logfile.tar.bz2'."; ./install_msw.sh >$logfile 2>&1; tar -cJf $logfile.tar.xz --directory=$(dirname $logfile) $(basename $logfile)

git diff --no-index --color=always --color-moved=plain /opt/lmi/logs/log-old /opt/lmi/logs/log-new |sed -e's/^.\[3[12]m/&ZZZ/' |less -RS

  # Extract all rate tables from a database

mkdir /tmp/q
pushd /tmp/q
  # examples using 'qx_cso' database
  # GNU/linux native:
     /opt/lmi/bin/rate_table_tool     --accept --file=/opt/lmi/data/qx_cso --extract-all
  # wine:
wine /opt/lmi/bin/rate_table_tool.exe --accept --file=/opt/lmi/data/qx_cso --extract-all
