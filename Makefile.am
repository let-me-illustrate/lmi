# Master automake makefile, run automake to generate Makefile.am from it (this
# is also done by autogen.sh script)
#
# Copyright (C) 2005, 2006, 2007, 2008 Vadim Zeitlin.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
#
# http://savannah.nongnu.org/projects/lmi
# email: <chicares@cox.net>
# snail: Chicares, 186 Belle Woods Drive, Glastonbury CT 06033, USA

# $Id: Makefile.am,v 1.51 2008-08-03 23:23:14 chicares Exp $

SUBDIRS = third_party

##############################################################################
# All Targets
##############################################################################

# targets going in bin
bin_PROGRAMS =   \
    lmi_cli   \
    lmi_wx \
    elapsed_time    \
    generate_passkey    \
    antediluvian_cli    \
    ihs_crc_comp    \
    product_files \
    test_coding_rules

# other programs which may or not be built depending on configure arguments
EXTRA_PROGRAMS = \
    antediluvian_cgi \
    gpt_server
#    gpt_server - does not contain main() function, bug?..
#    lmi_cgi - restore the target in the future

# libtool libraries installed in lib
lib_LTLIBRARIES =   \
    liblmi.la

# libtool convenience libraries which are not installed at all
noinst_LTLIBRARIES = \
    libantediluvian.la \
    libwx_new.la \
    libmain_auxiliary_common.la

# data files
xrcdir = $(pkgdatadir)
dist_xrc_DATA = $(shell ls -1 $(srcdir)/*.xrc $(srcdir)/*.xpm)

xsldir = $(pkgdatadir)
dist_xsl_DATA = $(shell ls -1 $(srcdir)/*.xsl)

# CGI stuff
if LMI_WITH_CGI
    lib_LTLIBRARIES += libcgi.la
    bin_PROGRAMS += antediluvian_cgi
endif

# tests
TESTS = \
    test_account_value \
    test_actuarial_table \
    test_alert \
    test_any_member \
    test_argv0 \
    test_assert_lmi \
    test_authenticity \
    test_calendar_date \
    test_callback \
    test_commutation_functions \
    test_comma_punct \
    test_crc32 \
    test_expression_template_0 \
    test_fenv_lmi \
    test_file_command \
    test_financial \
    test_global_settings \
    test_handle_exceptions \
    test_input_seq \
    test_input \
    test_irc7702a \
    test_loads \
    test_map_lookup \
    test_materially_equal \
    test_math_functors \
    test_mc_enum \
    test_mpatrol_patch \
    test_name_value_pairs \
    test_ncnnnpnn \
    test_numeric_io \
    test_obstruct_slicing \
    test_path_utility \
    test_print_matrix \
    test_progress_meter \
    test_quiet_nan \
    test_round \
    test_round_to \
    test_rtti_lmi \
    test_safely_dereference_as \
    test_sandbox \
    test_snprintf \
    test_stratified_algorithms \
    test_stream_cast \
    test_system_command \
    test_test_tools \
    test_timer \
    test_tn_range \
    test_value_cast \
    test_vector \
    test_wx_new \
    test_xenum \
    test_xrange \
    test_zero

check_PROGRAMS = $(TESTS)

####################################
# On windows use auto import feature
####################################
if LMI_MSW
    AM_LDFLAGS=--enable-auto-import
else
    AM_LDFLAGS=
endif

##############################################################################
# Targets definitions
##############################################################################

# main program executables
lmi_wx_SOURCES = \
    about_dialog.cpp \
    alert_wx.cpp \
    census_document.cpp \
    census_view.cpp \
    database_document.cpp \
    database_view.cpp \
    database_view_editor.cpp \
    default_view.cpp \
    docmanager_ex.cpp \
    docmdichildframe_ex.cpp \
    facets.cpp \
    file_command_wx.cpp \
    illustration_document.cpp \
    illustration_view.cpp \
    main_common.cpp \
    main_wx.cpp \
    msw_workarounds.cpp \
    multidimgrid_any.cpp \
    multidimgrid_tools.cpp \
    mvc_controller.cpp \
    mvc_view.cpp \
    policy_document.cpp \
    policy_view.cpp \
    preferences_view.cpp \
    previewframe_ex.cpp \
    product_editor.cpp \
    progress_meter_wx.cpp \
    rounding_document.cpp \
    rounding_view.cpp \
    rounding_view_editor.cpp \
    single_choice_popup_menu.cpp \
    system_command_wx.cpp \
    text_doc.cpp \
    text_view.cpp \
    tier_document.cpp \
    tier_view.cpp \
    tier_view_editor.cpp \
    transferor.cpp \
    view_ex.cpp \
    wx_checks.cpp \
    wx_utility.cpp

lmi_wx_CXXFLAGS = $(AM_CXXFLAGS) $(WX_CXXFLAGS) $(XMLWRAPP_FLAGS) $(GTK_CFLAGS) $(LIBXSLT_CFLAGS) $(LIBXML_CFLAGS)
# $(CGICC_INCLUDE_FLAGS)

if LMI_MSW
## use old style suffix rule instead of the pattern one as automake only
## recognizes the old style rules
.rc.o:
	windres -I $(top_srcdir) $(WX_CPPFLAGS) $< $@

    lmi_wx_SOURCES += lmi.rc
    lmi_wx_CXXFLAGS += -mwindows
endif
lmi_wx_LDADD =  \
    liblmi.la \
    libwx_new.la \
    $(XMLWRAPP_LIBS) \
    $(GTK_LIBS) \
    $(LIBXSLT_LIBS) \
    $(LIBXML_LIBS) \
    $(BOOST_LIBS) \
    $(WX_LIBS)
if LMI_MSW
    lmi_wx_SOURCES += lmi.rc
    lmi_wx_CXXFLAGS += -mwindows
endif

cli_sources = \
    alert_cli.cpp \
    file_command_cli.cpp \
    main_cli.cpp \
    main_common.cpp \
    main_common_non_wx.cpp \
    progress_meter_cli.cpp \
    system_command_non_wx.cpp

lmi_cli_SOURCES = \
    $(cli_sources)
lmi_cli_CXXFLAGS = $(AM_CXXFLAGS) $(XMLWRAPP_FLAGS) $(LIBXSLT_CFLAGS) $(LIBXML_CFLAGS)
lmi_cli_LDADD = \
    liblmi.la \
    $(XMLWRAPP_LIBS) \
    $(BOOST_LIBS)

# libraries

liblmi_common_sources = \
    actuarial_table.cpp \
    alert.cpp \
    calendar_date.cpp \
    configurable_settings.cpp \
    crc32.cpp \
    custom_io_0.cpp \
    data_directory.cpp \
    dbnames.cpp \
    death_benefits.cpp \
    emit_ledger.cpp \
    expm1.c \
    facets.cpp \
    fenv_guard.cpp \
    fenv_lmi.cpp \
    file_command.cpp \
    getopt.cpp \
    global_settings.cpp \
    group_values.cpp \
    illustrator.cpp \
    input.cpp \
    input_harmonization.cpp \
    input_realization.cpp \
    input_seq_helpers.cpp \
    input_sequence.cpp \
    input_xml_io.cpp \
    inputillus.cpp \
    inputillus_sequences.cpp \
    inputillus_xml_io.cpp \
    inputs.cpp \
    inputstatus.cpp \
    interest_rates.cpp \
    ledger.cpp \
    ledger_base.cpp \
    ledger_formatter.cpp \
    ledger_invariant.cpp \
    ledger_text_formats.cpp \
    ledger_variant.cpp \
    ledger_xml_io.cpp \
    ledger_xml_io2.cpp \
    ledger_xsl.cpp \
    ledgervalues.cpp \
    license.cpp \
    loads.cpp \
    miscellany.cpp \
    multiple_cell_document.cpp \
    mvc_model.cpp \
    name_value_pairs.cpp \
    outlay.cpp \
    path_utility.cpp \
    product_names.cpp \
    progress_meter.cpp \
    rounding_rules.cpp \
    sigfpe.cpp \
    single_cell_document.cpp \
    streamable.cpp \
    surrchg_rates.cpp \
    system_command.cpp \
    timer.cpp \
    xenumtypes.cpp \
    xml_lmi.cpp \
    xslt_lmi.cpp \
    xrange.cpp \
    yare_input.cpp

libmain_auxiliary_common_la_SOURCES = \
    alert.cpp \
    alert_cli.cpp \
    fenv_lmi.cpp \
    main_common.cpp \
    main_common_non_wx.cpp \
    sigfpe.cpp
libmain_auxiliary_common_la_CXXFLAGS = $(AM_CXXFLAGS)

libantediluvian_la_SOURCES = \
    accountvalue.cpp \
    antediluvian_stubs.cpp \
    avdebug.cpp \
    basicvalues.cpp \
    database.cpp \
    dbdict.cpp \
    dbvalue.cpp \
    mortality_rates.cpp \
    solve.cpp \
    $(liblmi_common_sources)
libantediluvian_la_CXXFLAGS = $(AM_CXXFLAGS) $(XMLWRAPP_FLAGS) $(LIBXSLT_CFLAGS) $(LIBXML_CFLAGS)
libantediluvian_la_CFLAGS = $(AM_CFLAGS)
libantediluvian_la_LDFLAGS = -no-undefined $(AM_LDFLAGS)
libantediluvian_la_LIBADD = \
    $(BOOST_LIBS)

liblmi_la_SOURCES = \
    authenticity.cpp \
    ce_product_name.cpp \
    datum_base.cpp \
    datum_boolean.cpp \
    datum_string.cpp \
    ihs_acctval.cpp \
    ihs_avdebug.cpp \
    ihs_avmly.cpp \
    ihs_avsolve.cpp \
    ihs_avstrtgy.cpp \
    ihs_basicval.cpp \
    ihs_commfns.cpp \
    ihs_database.cpp \
    ihs_dbdict.cpp \
    ihs_dbvalue.cpp \
    ihs_fpios.cpp \
    ihs_funddata.cpp \
    ihs_irc7702.cpp \
    ihs_irc7702a.cpp \
    ihs_mortal.cpp \
    ihs_pios.cpp \
    ihs_proddata.cpp \
    ihs_rnddata.cpp \
    mc_enum.cpp \
    mc_enum_types.cpp \
    mc_enum_types_aux.cpp \
    md5.cpp \
    preferences_model.cpp \
    stratified_algorithms.cpp \
    stratified_charges.cpp \
    tn_range_types.cpp \
    $(liblmi_common_sources)
liblmi_la_CXXFLAGS = $(AM_CXXFLAGS) $(XMLWRAPP_FLAGS) $(LIBXSLT_CFLAGS) $(LIBXML_CFLAGS)
liblmi_la_CFLAGS = $(AM_CFLAGS)
liblmi_la_LDFLAGS = -no-undefined $(AM_LDFLAGS)
liblmi_la_LIBADD = \
    $(XMLWRAPP_LIBS) \
    $(LIBXSLT_LIBS) \
    $(LIBXML_LIBS) \
    $(BOOST_LIBS)

libcgi_la_SOURCES = \
    alert_cgi.cpp \
    file_command_cgi.cpp \
    main_cgi.cpp \
    main_common.cpp \
    main_common_non_wx.cpp \
    progress_meter_cgi.cpp \
    system_command_non_wx.cpp

libcgi_la_CXXFLAGS = $(BOOST_INCLUDE_FLAGS) $(CGICC_INCLUDE_FLAGS) $(AM_CXXFLAGS)
libcgi_la_LIBADD = $(CGICC_LIBS)

libwx_new_la_SOURCES = wx_new.cpp
libwx_new_la_LDFLAGS = -no-undefined $(AM_LDFLAGS)
libwx_new_la_LIBADD = $(WX_LIBS)

# auxiliary executables

generate_passkey_SOURCES = \
    authenticity.cpp \
    calendar_date.cpp \
    generate_passkey.cpp \
    global_settings.cpp \
    md5.cpp \
    miscellany.cpp \
    path_utility.cpp \
    system_command.cpp \
    system_command_non_wx.cpp
generate_passkey_CXXFLAGS = $(AM_CXXFLAGS)
generate_passkey_LDADD = \
    $(BOOST_LIBS) \
    libmain_auxiliary_common.la

gpt_server_SOURCES = $(top_builddir)/dummy.cpp
gpt_server_CXXFLAGS = $(AM_CXXFLAGS)
gpt_server_LDADD = \
    liblmi.la

elapsed_time_SOURCES = \
    elapsed_time.cpp \
    system_command.cpp \
    system_command_non_wx.cpp \
    timer.cpp
elapsed_time_CXXFLAGS = $(AM_CXXFLAGS)
elapsed_time_LDADD = \
    libmain_auxiliary_common.la

antediluvian_cgi_SOURCES = $(top_builddir)/dummy.cpp
antediluvian_cgi_CXXFLAGS = $(AM_CXXFLAGS) $(BOOST_INCLUDE_FLAGS)
antediluvian_cgi_LDADD = \
    libcgi.la \
    libantediluvian.la   \
    $(CGICC_LIBS) \
    $(BOOST_LIBS)

antediluvian_cli_SOURCES = \
    $(cli_sources)
antediluvian_cli_CXXFLAGS = $(AM_CXXFLAGS) $(XMLWRAPP_FLAGS) $(LIBXSLT_CFLAGS) $(LIBXML_CFLAGS)
antediluvian_cli_LDADD = \
    libantediluvian.la  \
    liblmi.la \
    $(BOOST_LIBS) \
    $(XMLWRAPP_LIBS)

ihs_crc_comp_SOURCES = ihs_crc_comp.cpp
ihs_crc_comp_LDADD = libmain_auxiliary_common.la

product_files_SOURCES = \
    generate_product_files.cpp \
    main_common.cpp \
    main_common_non_wx.cpp \
    my_db.cpp \
    my_fund.cpp \
    my_prod.cpp \
    my_rnd.cpp \
    my_tier.cpp \
    xenumtypes.cpp
product_files_LDADD = \
    liblmi.la   \
    $(BOOST_LIBS) \
    $(XMLWRAPP_LIBS)

test_coding_rules_SOURCES = \
  my_test_coding_rules.cpp \
  test_coding_rules.cpp
test_coding_rules_CXXFLAGS = $(AM_CXXFLAGS) $(BOOST_INCLUDE_FLAGS)
test_coding_rules_LDADD = \
  libmain_auxiliary_common.la \
  $(BOOST_LIBS)

dummy.cpp:
	touch $@

# unit tests
common_test_objects = \
    alert.cpp \
    alert_cli.cpp \
    fenv_lmi.cpp \
    getopt.cpp \
    license.cpp \
    timer.cpp

test_account_value_SOURCES = \
  $(common_test_objects) \
  account_value_test.cpp
test_account_value_CXXFLAGS = $(AM_CXXFLAGS)

test_actuarial_table_SOURCES = \
  $(common_test_objects) \
  actuarial_table.cpp \
  actuarial_table_test.cpp
test_actuarial_table_CXXFLAGS = $(AM_CXXFLAGS)
test_actuarial_table_LDADD = \
  $(BOOST_LIBS)

test_alert_SOURCES = \
  $(common_test_objects) \
  alert_test.cpp
test_alert_CXXFLAGS = $(AM_CXXFLAGS)

test_any_member_SOURCES =   \
  $(common_test_objects) \
  any_member_test.cpp \
  facets.cpp
test_any_member_CXXFLAGS = $(AM_CXXFLAGS)

test_argv0_SOURCES =    \
  $(common_test_objects) \
  argv0_test.cpp
test_argv0_CXXFLAGS = $(AM_CXXFLAGS)
test_argv0_LDADD =    \
  $(BOOST_LIBS)

test_assert_lmi_SOURCES = \
  $(common_test_objects) \
  assert_lmi_test.cpp
test_assert_lmi_CXXFLAGS = $(AM_CXXFLAGS)

test_authenticity_SOURCES = \
  $(common_test_objects) \
  authenticity.cpp \
  authenticity_test.cpp \
  calendar_date.cpp \
  global_settings.cpp \
  md5.cpp \
  miscellany.cpp \
  path_utility.cpp \
  system_command.cpp \
  system_command_non_wx.cpp
test_authenticity_CXXFLAGS = $(AM_CXXFLAGS)
test_authenticity_LDADD = \
  $(BOOST_LIBS)

test_calendar_date_SOURCES =    \
  $(common_test_objects) \
  calendar_date.cpp \
  calendar_date_test.cpp
test_calendar_date_CXXFLAGS = $(AM_CXXFLAGS)

test_callback_SOURCES = \
  $(common_test_objects) \
  callback_test.cpp
test_callback_CXXFLAGS = $(AM_CXXFLAGS)

test_commutation_functions_SOURCES =    \
  $(common_test_objects) \
  commutation_functions_test.cpp \
  ihs_commfns.cpp \
  xenumtypes.cpp
test_commutation_functions_CXXFLAGS = $(AM_CXXFLAGS)

test_comma_punct_SOURCES =  \
  $(common_test_objects) \
  comma_punct_test.cpp
test_comma_punct_CXXFLAGS = $(AM_CXXFLAGS)

test_crc32_SOURCES =    \
  $(common_test_objects) \
  crc32.cpp \
  crc32_test.cpp
test_crc32_CXXFLAGS = $(AM_CXXFLAGS)

test_expression_template_0_SOURCES =    \
  $(common_test_objects) \
  expression_template_0_test.cpp
test_expression_template_0_CXXFLAGS = $(AM_CXXFLAGS)

test_fenv_lmi_SOURCES = \
  $(common_test_objects) \
  fenv_guard.cpp \
  fenv_lmi_test.cpp
test_fenv_lmi_CXXFLAGS = $(AM_CXXFLAGS)

test_file_command_SOURCES = \
  $(common_test_objects) \
  file_command.cpp \
  file_command_cli.cpp \
  file_command_test.cpp
test_file_command_CXXFLAGS = $(AM_CXXFLAGS)

test_financial_SOURCES =    \
  $(common_test_objects) \
  financial_test.cpp \
  stratified_algorithms.cpp
test_financial_CXXFLAGS = $(AM_CXXFLAGS)

test_global_settings_SOURCES =  \
  $(common_test_objects) \
  global_settings.cpp \
  global_settings_test.cpp \
  miscellany.cpp \
  path_utility.cpp
test_global_settings_CXXFLAGS = $(AM_CXXFLAGS)
test_global_settings_LDADD =  \
  $(BOOST_LIBS)

test_handle_exceptions_SOURCES = \
  $(common_test_objects) \
  handle_exceptions_test.cpp
test_handle_exceptions_CXXFLAGS = $(AM_CXXFLAGS)

test_input_seq_SOURCES =    \
  $(common_test_objects) \
  input_seq_test.cpp \
  input_sequence.cpp
test_input_seq_CXXFLAGS = $(AM_CXXFLAGS)

test_input_SOURCES =    \
  $(common_test_objects) \
  calendar_date.cpp \
  ce_product_name.cpp \
  configurable_settings.cpp \
  data_directory.cpp \
  database.cpp \
  datum_base.cpp \
  datum_string.cpp \
  dbdict.cpp \
  dbnames.cpp \
  dbvalue.cpp \
  facets.cpp \
  global_settings.cpp \
  input.cpp \
  input_harmonization.cpp \
  input_realization.cpp \
  input_seq_helpers.cpp \
  input_sequence.cpp \
  input_test.cpp \
  input_xml_io.cpp \
  inputillus.cpp \
  inputillus_sequences.cpp \
  inputillus_xml_io.cpp \
  inputs.cpp \
  inputstatus.cpp \
  mc_enum.cpp \
  mc_enum_types.cpp \
  miscellany.cpp \
  multiple_cell_document.cpp \
  mvc_model.cpp \
  path_utility.cpp \
  product_names.cpp \
  single_cell_document.cpp \
  streamable.cpp \
  tn_range_types.cpp \
  xenumtypes.cpp \
  xml_lmi.cpp \
  xrange.cpp \
  yare_input.cpp

test_input_CXXFLAGS = $(AM_CXXFLAGS) $(XMLWRAPP_FLAGS) $(LIBXSLT_CFLAGS) $(LIBXML_CFLAGS)
test_input_LDADD =    \
  $(BOOST_LIBS) \
  $(XMLWRAPP_LIBS) \
  $(test_input_extra_libs)

test_irc7702a_SOURCES = \
  $(common_test_objects) \
  ihs_irc7702a.cpp \
  irc7702a_test.cpp \
  stratified_algorithms.cpp
test_irc7702a_CXXFLAGS = $(AM_CXXFLAGS)

test_loads_SOURCES = \
  $(common_test_objects) \
  loads.cpp \
  loads_test.cpp \
  xenumtypes.cpp \
  expm1.c
test_loads_CXXFLAGS = $(AM_CXXFLAGS)

test_map_lookup_SOURCES = \
  $(common_test_objects) \
  map_lookup_test.cpp
test_map_lookup_CXXFLAGS = $(AM_CXXFLAGS)

test_materially_equal_SOURCES = \
  $(common_test_objects) \
  materially_equal_test.cpp
test_materially_equal_CXXFLAGS = $(AM_CXXFLAGS)

test_math_functors_SOURCES =    \
  $(common_test_objects) \
  math_functors_test.cpp
test_math_functors_CXXFLAGS = $(AM_CXXFLAGS)

test_mc_enum_SOURCES =  \
  $(common_test_objects) \
  datum_base.cpp \
  facets.cpp \
  global_settings.cpp \
  mc_enum.cpp \
  mc_enum_test.cpp \
  mc_enum_test_aux.cpp \
  miscellany.cpp \
  path_utility.cpp
test_mc_enum_CXXFLAGS = $(AM_CXXFLAGS)
test_mc_enum_LDADD =  \
  $(BOOST_LIBS)

test_mpatrol_patch_SOURCES =    \
  $(common_test_objects) \
  mpatrol_patch_test.cpp
test_mpatrol_patch_CXXFLAGS = $(AM_CXXFLAGS)

test_name_value_pairs_SOURCES = \
  $(common_test_objects) \
  name_value_pairs.cpp \
  name_value_pairs_test.cpp
test_name_value_pairs_CXXFLAGS = $(AM_CXXFLAGS)

test_ncnnnpnn_SOURCES = \
  $(common_test_objects) \
  ncnnnpnn_test.cpp
test_ncnnnpnn_CXXFLAGS = $(AM_CXXFLAGS)

test_numeric_io_SOURCES =   \
  $(common_test_objects) \
  numeric_io_test.cpp
test_numeric_io_CXXFLAGS = $(AM_CXXFLAGS)

test_obstruct_slicing_SOURCES = \
  $(common_test_objects) \
  obstruct_slicing_test.cpp
test_obstruct_slicing_CXXFLAGS = $(AM_CXXFLAGS)

test_path_utility_SOURCES = \
  $(common_test_objects) \
  miscellany.cpp \
  path_utility.cpp \
  path_utility_test.cpp
test_path_utility_CXXFLAGS = $(AM_CXXFLAGS)
test_path_utility_LDADD = \
  $(BOOST_LIBS)

test_print_matrix_SOURCES = \
  $(common_test_objects) \
  print_matrix_test.cpp
test_print_matrix_CXXFLAGS = $(AM_CXXFLAGS)

test_progress_meter_SOURCES =   \
  $(common_test_objects) \
  progress_meter.cpp \
  progress_meter_cli.cpp \
  progress_meter_test.cpp
test_progress_meter_CXXFLAGS = $(AM_CXXFLAGS)
test_progress_meter_LDADD =   \
  liblmi.la

test_quiet_nan_SOURCES =    \
  $(common_test_objects) \
  quiet_nan_test.cpp
test_quiet_nan_CXXFLAGS = $(AM_CXXFLAGS)

test_round_SOURCES = \
  $(common_test_objects) \
  round_test.cpp
test_round_CXXFLAGS = $(AM_CXXFLAGS)

test_round_to_SOURCES = \
  $(common_test_objects) \
  round_to_test.cpp
test_round_to_CXXFLAGS = $(AM_CXXFLAGS)

test_rtti_lmi_SOURCES = \
  $(common_test_objects) \
  rtti_lmi_test.cpp
test_rtti_lmi_CXXFLAGS = $(AM_CXXFLAGS)

test_safely_dereference_as_SOURCES = \
  $(common_test_objects) \
  safely_dereference_as_test.cpp
test_safely_dereference_as_CXXFLAGS = $(AM_CXXFLAGS)

test_sandbox_SOURCES = \
  $(common_test_objects) \
  sandbox_test.cpp
test_sandbox_CXXFLAGS = $(AM_CXXFLAGS)

test_snprintf_SOURCES = \
  $(common_test_objects) \
  snprintf_test.cpp
test_snprintf_CXXFLAGS = $(AM_CXXFLAGS)

test_stratified_algorithms_SOURCES =    \
  $(common_test_objects) \
  stratified_algorithms_test.cpp
test_stratified_algorithms_CXXFLAGS = $(AM_CXXFLAGS)

test_stream_cast_SOURCES =  \
  $(common_test_objects) \
  facets.cpp \
  stream_cast_test.cpp
test_stream_cast_CXXFLAGS = $(AM_CXXFLAGS)

test_system_command_SOURCES = \
  $(common_test_objects) \
  system_command.cpp \
  system_command_non_wx.cpp \
  system_command_test.cpp
test_system_command_CXXFLAGS = $(AM_CXXFLAGS)

test_test_tools_SOURCES =   \
  $(common_test_objects) \
  test_tools_test.cpp
test_test_tools_CXXFLAGS = $(AM_CXXFLAGS)

test_timer_SOURCES =    \
  $(common_test_objects) \
  timer_test.cpp
test_timer_CXXFLAGS = $(AM_CXXFLAGS)

test_tn_range_SOURCES = \
  $(common_test_objects) \
  datum_base.cpp \
  facets.cpp \
  tn_range_test.cpp \
  tn_range_test_aux.cpp
test_tn_range_CXXFLAGS = $(AM_CXXFLAGS)

test_value_cast_SOURCES =   \
  $(common_test_objects) \
  facets.cpp \
  value_cast_test.cpp
test_value_cast_CXXFLAGS = $(AM_CXXFLAGS)

test_vector_SOURCES =   \
  $(common_test_objects) \
  vector_test.cpp
test_vector_CXXFLAGS = $(AM_CXXFLAGS)

test_wx_new_SOURCES = \
  $(common_test_objects) \
  wx_new_test.cpp
test_wx_new_CXXFLAGS = $(AM_CXXFLAGS)

test_xenum_SOURCES =    \
  $(common_test_objects) \
  xenum_sample.cpp \
  xenum_test.cpp
test_xenum_CXXFLAGS = $(AM_CXXFLAGS)

test_xrange_SOURCES =   \
  $(common_test_objects) \
  calendar_date.cpp \
  facets.cpp \
  xrange.cpp \
  xrange_test.cpp
test_xrange_CXXFLAGS = $(AM_CXXFLAGS)

test_zero_SOURCES = \
  $(common_test_objects) \
  zero_test.cpp
test_zero_CXXFLAGS = $(AM_CXXFLAGS)

# headers: we need to include them or they wouldn't appear in the distribution
noinst_HEADERS = \
    about_dialog.hpp \
    account_value.hpp \
    actuarial_table.hpp \
    alert.hpp \
    any_entity.hpp \
    any_member.hpp \
    argv0.hpp \
    assert_lmi.hpp \
    authenticity.hpp \
    basic_values.hpp \
    calendar_date.hpp \
    callback.hpp \
    catch_exceptions.hpp \
    census_document.hpp \
    census_view.hpp \
    ce_product_name.hpp \
    comma_punct.hpp \
    config_bc551.hpp \
    config_como_mingw.hpp \
    config.hpp \
    config_ming323.hpp \
    configurable_settings.hpp \
    crc32.hpp \
    custom_io_0.hpp \
    database_document.hpp \
    database.hpp \
    database_view_editor.hpp \
    database_view.hpp \
    data_directory.hpp \
    datum_base.hpp \
    datum_boolean.hpp \
    datum_string.hpp \
    dbdict.hpp \
    dbindex.hpp \
    dbnames.hpp \
    dbvalue.hpp \
    death_benefits.hpp \
    default_view.hpp \
    dev_null_stream_buffer.hpp \
    docmanager_ex.hpp \
    docmdichildframe_ex.hpp \
    emit_ledger.hpp \
    exit_codes.hpp \
    facets.hpp \
    fenv_guard.hpp \
    fenv_lmi.hpp \
    fenv_lmi_x86.hpp \
    file_command.hpp \
    financial.hpp \
    getopt.hpp \
    global_settings.hpp \
    group_values.hpp \
    handle_exceptions.hpp \
    ihs_commfns.hpp \
    ihs_dbdict.hpp \
    ihs_dbvalue.hpp \
    ihs_fpios.hpp \
    ihs_funddata.hpp \
    ihs_irc7702a.hpp \
    ihs_irc7702.hpp \
    ihs_pios.hpp \
    ihs_proddata.hpp \
    ihs_rnddata.hpp \
    ihs_server7702.hpp \
    ihs_server7702io.hpp \
    ihs_x_type.hpp \
    illustration_document.hpp \
    illustration_view.hpp \
    illustrator.hpp \
    input.hpp \
    inputillus.hpp \
    input_seq_helpers.hpp \
    input_sequence.hpp \
    inputs.hpp \
    inputstatus.hpp \
    interest_rates.hpp \
    istream_to_string.hpp \
    ledger_base.hpp \
    ledger_excerpt.hpp \
    ledger_formatter.hpp \
    ledger.hpp \
    ledger_invariant.hpp \
    ledger_text_formats.hpp \
    ledgervalues.hpp \
    ledger_variant.hpp \
    ledger_xsl.hpp \
    license.hpp \
    loads.hpp \
    loads_impl.hpp \
    main_common.hpp \
    main_wx.hpp \
    map_lookup.hpp \
    materially_equal.hpp \
    math_functors.hpp \
    max_stream_precision.hpp \
    mc_enum_fwd.hpp \
    mc_enum.hpp \
    mc_enum_aux.hpp \
    mc_enum_test_aux_enums.hpp \
    mc_enum_test_aux.hpp \
    mc_enum_type_enums.hpp \
    mc_enum_types.hpp \
    mc_enum_types_aux.hpp \
    md5.hpp \
    miscellany.hpp \
    mortality_rates.hpp \
    msw_workarounds.hpp \
    multidimgrid_any.hpp \
    multidimgrid_safe.hpp \
    multidimgrid_tools.hpp \
    multiple_cell_document.hpp \
    mvc_controller.hpp \
    mvc_model.hpp \
    mvc_view.hpp \
    name_value_pairs.hpp \
    ncnnnpnn.hpp \
    numeric_io_cast.hpp \
    numeric_io_traits.hpp \
    obstruct_slicing.hpp \
    oecumenic_enumerations.hpp \
    outlay.hpp \
    path_utility.hpp \
    pchfile.hpp \
    platform_dependent.hpp \
    policy_document.hpp \
    policy_view.hpp \
    preferences_model.hpp \
    preferences_view.hpp \
    previewframe_ex.hpp \
    print_matrix.hpp \
    product_editor.hpp \
    product_names.hpp \
    progress_meter.hpp \
    quiet_nan.hpp \
    rounding_document.hpp \
    rounding_rules.hpp \
    rounding_view_editor.hpp \
    rounding_view.hpp \
    round_to.hpp \
    rtti_lmi.hpp \
    safely_dereference_as.hpp \
    sigfpe.hpp \
    single_cell_document.hpp \
    single_choice_popup_menu.hpp \
    so_attributes.hpp \
    stl_extensions.hpp \
    stratified_algorithms.hpp \
    stratified_charges.hpp \
    streamable.hpp \
    stream_cast.hpp \
    surrchg_rates.hpp \
    system_command.hpp \
    test_tools.hpp \
    text_doc.hpp \
    text_view.hpp \
    tier_document.hpp \
    tier_view_editor.hpp \
    tier_view.hpp \
    timer.hpp \
    tn_range_fwd.hpp \
    tn_range.hpp \
    tn_range_test_aux.hpp \
    tn_range_types.hpp \
    tn_range_type_trammels.hpp \
    transferor.hpp \
    value_cast.hpp \
    version.hpp \
    view_ex.hpp \
    wx_checks.hpp \
    wx_new.hpp \
    wx_utility.hpp \
    wx_workarounds.hpp \
    xenumfwd.hpp \
    xenum.hpp \
    xenum_sample.hpp \
    xenumtypes.hpp \
    xml_lmi_fwd.hpp \
    xml_lmi.hpp \
    xrangefwd.hpp \
    xrange.hpp \
    xrangetypes.hpp \
    xslt_lmi.hpp \
    yare_input.hpp \
    zero.hpp
