// README.auto for "Let me illustrate...".
//
// Copyright (C) 2005 Vadim Zeitlin.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// http://savannah.nongnu.org/projects/lmi
// email: <chicares@cox.net>
// snail: Chicares, 186 Belle Woods Drive, Glastonbury CT 06033, USA

// $Id: README.auto,v 1.3.2.1 2006-01-28 01:41:59 etarassov Exp $

                  README file for building LMI with autotools
                  ===========================================

0. Introduction
---------------

LMI now has a autoconf toolchain build system. The advantages of using it are:

a) we can use standard "configure && make && make install" invocation and
   standard configure options such as --prefix, --enable-debug and so on
   can be used

b) configure does run-time checks which allows to find 3rd party libraries
   (boost, wxWidgets, ...) and adapt to other systems/compilers more easily

c) makefiles are much simpler and we get install, dist and check targets
   for free


Possible disadvantage is the need for additional tools but if you follow the
instructions below it shouldn't be a problem.


1. Installing the required libraries
------------------------------------

a) wxWidgets: create any directory (it will be called wx-build below),
        for example a $wx/build-cygwin subdirectory (but it doesn't
        necessarily have to be under $wx) and run

            $wx/configure \
                --enable-std_string \
                --disable-threads \
                --disable-apple_ieee \
                --without-libjpeg \
                --without-libtiff \
                --disable-gif

        You may add "--prefix=" option if you are building shared libraries
        which will be installed wih lmi, "--disable-shared" option if you want
        to build static libraries and "--enable-debug" if you want to build
        wxWidgets with debugging enabled (highly recommended during
        development!).

b) boost: static boost_filesystem library is available as a standard cygwin
        package but if you want to use shared libraries or use mingw32, you
        need to build this library yourself (the rest of boost classes used by
        lmi are headers only and don't have to be built at all) using the
        standard instruction from http://www.boost.org/

        Notice that if you don't have shared boost libraries, libtool won't be
        able to build shared liblmi and so using it will be just a waste of a
        couple of dozens of megabytes.

        Under Unix, at the time of this writing (2005-11-01) Debian has boost
        packages built with g++ 3.3 but they are not binary compatible with g++
        3.4/4.0 so if you use the latter you *must* build from source or you
        get mysterious run-time crashes.

c) libxml2: production and development packages are available as a standard
        cygwin package.

d) libxml++: the library depends on glibmm::ustring class form glibmm library.
        If compiling from scratch it demands alot of efforts, notably to install
        glibmm library and its dependencies which contains cyclic dependencies.
		
        Use the patch (http://bugzilla.gnome.org/attachment.cgi?id=54059) from
        libxml++ bugzilla (http://bugzilla.gnome.org/show_bug.cgi?id=320197)
        to avoid glibmm dependancy. You need to specify --without-ustring when
        configuring libxml++.

e) pkg-config (optional): If you are going to regenerate configure script
        then you have to provide to autotools the pkg-config m4 file. If you
        don't have pkg-config installed on your system you could add
        "-I $pkg_m4_dir" to ACLOCAL_AMFLAGS environment variable where
        $pkg_m4_dir is the directory containing pkg.m4 file.

        Further more to configure the package you will need either:
        - to install pkg-config, as it dramatically simplifies libxml++ package
        configuration and library dependency tracking.
        - or to supply LIBXMLPP_LIBS and LIBXMLPP_CFLAGS. Depending on whether
        you have compiled libxml++ with glibmm or without:

        LIBXMLPP_LIBS=-L<xml++_lib_dir> -lxml++-2.6 -lxml2 -lz -lm -liconv \
            -lglibmm-2.4 -lgobject-2.0 -lsigc-2.0 -lglib-2.0 -lintl

        LIBXMLPP_CFLAGS=-I<libxml++_includes_dir> -I<libxml2_includes_dir> \
            -I<glibmm_include_dir> -I<sigc++_include_dir> -I<glib_include_dir>

        The flags could be passed to configure script either in the command line
        $> configure LIBXMLPP_LIBS=".." LIBXMLPP_CFLAGS=".."
        or by exporting it to the environment
        $> export LIBXMLPP_LIBS=".." && export LIBXMLPP_CFLAGS=".." && configure

2. Build system setup
---------------------

After a fresh cvs checkout you need to run autogen.sh once. For it to work,
you need the following utilities:

a) GNU autoconf >= 2.56 (2.56 under mingw and 2.59 under cygwin are known to work)
b) GNU automake >= 1.5 (at least; 1.7.9 and 1.9.6 known to work)
c) GNU libtool >= 1.5 (1.5.20 known to work)

Notice that you can run autogen.sh on one system and copy the resulting files
(configure, Makefile.in, config.*, libtool) to another one, then you just need
the C++ compiler (g++ versions 3.3, 3.4 and 4.0 are known to work) on the other
system but you won't be able to change neither configure.ac nor Makefile.am.

Also note that you must normally install wxWidgets before running autogen.sh as
this installs wxwin.m4 file required by aclocal. However there is an
alternative: ensure that "wx" environment variable exists and points to the
(uninstalled) wx source tree which you want to use and set ACLOCAL_AMFLAGS
environment variable to "-I $wx".

Normally you must install pkg-config package for the configure to run properly.
However it is possible to download pkg.m4 file (part of pkg-config distribution)
to use it in the same way as for wxwin.m4 : add "-I $pkg_m4_dir"
to ACLOCAL_AMFLAGS environment variable, where $pkg_m4_dir points
to the directory containing pkg.m4 file.

3. Build
--------

To build, create a build directory (building in source directory is also
possible but strongly unadvised) and run "lmi-path/configure" from it. Full
list of configure options can be obtained with "configure --help" but the most
useful ones are:

    --prefix=/opt/lmi           to install /opt and not default /usr/local
    --with-wxdir=$wx-build      to use uninstalled wx version from $wx-build
    --with-boost-filesystem-src to compile a custom boost_filesystem library
                                using boost sources
    --enable-debug              to enable debugging (asserts...)
    --disable-shared            to build static libraries only (for deployment)


Then type "make". If it succeeds, you can do "make install". Other useful
targets are "make check", "make dist" or "make dist-bzip2" (and "make
distcheck" to check that it works), "make uninstall", "make clean" and "make
maintainer-clean" (don't use the latter if you don't have autotools installed
as you won't be able to regenerate the makefile after it).


Version: $Id: README.auto,v 1.3.2.1 2006-01-28 01:41:59 etarassov Exp $
