// DefectLog for "Let me illustrate...". See 'MAINTENANCE' after license.
//
// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012, 2013 Gregory W. Chicares.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
//
// http://savannah.nongnu.org/projects/lmi
// email: <gchicares@sbcglobal.net>
// snail: Chicares, 186 Belle Woods Drive, Glastonbury CT 06033, USA

// $Id$

MAINTENANCE

Please write entries this way:

[ 1] YYYYMMDDTHHMMZ <yourname@domain.net>
[ 2] Symptom: [observable behavior, with steps to reproduce]
[ 3] Discovered:
       * by {author, reviewer, tester, local user, remote user...}
       * during [activity]
[ 4] Location: [brief code snippet, citing source file]
[ 5] Premonitory defect markers: [if any]
[ 6] Cause: [what's wrong with the code; proximate vs. ultimate cause]
[ 7] Genesis: [in which revision was the defect introduced?]
       * in brand-new code? refactoring? redesign?
       * while fixing a defect? the same defect?
[ 8] Provident safeguards: [what prevented more severe damage?]
[ 9] Similar defects elsewhere:
[10] Critique of the past: [how could this have been avoided?]
[11] Watchwords for the future:
[12] Person-hours spent on diagnosis and repair:
[13] Automated tests: [were there any before? have any been added?]
[14] Repairs completed: [cite 'ChangeLog'; summarize if not obvious]
[15] Repairs postponed: [cite tracker item]

Limit lines to seventy characters so that they can be quoted and
requoted in email without wrapping, but don't wrap URLs or quoted code
(mark quoted lines with an initial '|' so that 'make check_concinnity'
doesn't complain about their length; it ignores lines consisting only
of an http URL, optionally indented with spaces).

//

20070705T0108Z <chicares@cox.net>

Symptom: Calendar date displayed as '-4712-02--14'. To reproduce:
  cd /tmp
  rm expiry
  touch expiry
  echo -n 0123456789abcdef0123456789abcdef >passkey
  /opt/lmi/bin/lmi_wx_shared.exe
Error message:
  Current date '2007-06-25' is invalid: this system expired on
  '-4712-02--14'. Contact the home office.
Variation:
  echo -n '2400000' > expiry

Discovered: By author, while testing simulated precondition failures
after the 20070626T0029Z change.

Location: Stream extraction into class calendar_date:

  authenticity.cpp

    is >> begin >> end;
    if(!is.eof())
      [error message]

  calendar_date.cpp

    int z;
    is >> z;
    date.julian_day_number(z);

Premonitory defect markers:

  authenticity_test.cpp

  // TODO ?? Add tests for diagnostics that aren't tested yet.

Cause: The proximate cause is that the expiry date appears to be in
the neighborhood of julian day number zero, which is formatted as an
invalid gregorian date because it is outside the valid bounds of ACM
algorithm 199. The ultimate cause is that the calendar-date extractor
doesn't initialize 'z', yet may fail to change its value and doesn't
set 'failbit', which isn't tested anyway where it should be.

Genesis: Introduced before the lmi epoch:
  calendar_date.cpp,v 1.1 2005/01/14 19:47:44 chicares
and shortly thereafter--this file
  authenticity.cpp,v 1.1 2006/12/21 17:50:29 chicares
has this ancestor:
  secure_date.cpp,v 1.3 2005/07/05 17:49:53 chicares
and the purpose of the last revision was to fix a defect in error
reporting. Probably these errors were copied from even older code.

Provident safeguards: std::exit() is called immediately after the
error message is displayed. However, the value of 'z' is undefined and
happened to be around zero only by luck; a different value might have
caused authentication to succeed erroneously. Only discipline in
assembling a distribution could have prevented erroneous acceptance of
an 'expiry' file containing only a (valid) begin date, as in the
variation given in "Symptom" above.

Similar defects elsewhere: Numerous instances of the defects critiqued
below.

Critique of the past: "Care about the output variable of an extractor"
(Langer & Kreft 3.1.3.3). Extractors should set 'failbit' (and reset
'eofbit') on error--see:
  http://groups.google.com/groups?selm=3A5D9F04.AACDF32B@dresdner-bank.com
Stream state should be tested after each series of stream operations.

Watchwords for the future: Don't copy idioms from old code blithely.
Include all edge conditions in unit tests.

Person-hours spent on diagnosis and repair: Twenty-six.

Automated tests: Unit tests
  authenticity_test.cpp
  calendar_date_test.cpp
that were extensive but not comprehensive have been further extended.

Repairs completed:
  calendar_date*.?pp
20070703T1848Z Preparatory refactoring.
20070703T1942Z Ascertain and add workable bounds for Algorithm 199.
20070703T2032Z Add a failing unit test.
20070703T2033Z Correct the unit-test failure.
  authenticity*.?pp
20070704T0439Z Add a failing unit test.
20070704T0440Z Correct one cause of unit-test failure.
20070704T0453Z Correct remaining cause of unit-test failure.

Repairs postponed: The defects critiqued above are ubiquitous. The
premonitory defect marker cited above cannot yet be removed. See:
  https://savannah.nongnu.org/task/index.php?7061

20080523T0407Z <gchicares@sbcglobal.net>

Symptom: When a select table is indexed with an issue age greater than
its maximum select age, returned rates are undefined, and a downstream
assertion may fire, or a nonsensical illustration may be produced. To
reproduce (before 20080518T1345Z):
  Run an illustration with an issue age one greater than the maximum
    select age for the current COI table, where the maximum select age
    is less than the maximum (ultimate) age and product rules permit
    such an issue age; and where a 'minimum' payment strategy is used,
    for a product whose 'DB_MinPremType' is 'e_monthly_deduction'.
  Save.
  Reload the saved file.
  Randomly navigate among controls.
  Hit Enter.
Error message:
| Assertion 'materially_equal(GrossPmts[Month], EeGrossPmts[Month] + ErGrossPmts[Month])' failed.
| [file /opt/lmi/src/lmi/ihs_avmly.cpp, line 1659]
Occurrence is random; moving focus among controls makes it likelier.

Discovered: By local user, while running a production case.

Location: Rate lookup for select and ultimate tables:
  http://cvs.sv.gnu.org/viewvc/lmi/lmi/actuarial_table.cpp?annotate=1.37
lines 497-500:

|            int k =
|                    std::max(0, issue_age - max_select_age_)
|                +   std::min(max_select_age_, issue_age - min_age_) * (1 + select_period_)
|                ;

The number of select-period strides should be
  (std::min(max_select_age_, issue_age) - min_age_)
instead of
  std::min(max_select_age_, issue_age - min_age_)
; this defect is invisible when min_age_ equals zero, and the original
unit test used a table with just such an infelicitous min_age_.

The intermittent runtime error arises here:
  http://cvs.sv.gnu.org/viewvc/lmi/lmi/ihs_avmly.cpp?annotate=1.71
line 1659:

|    HOPEFULLY(materially_equal(GrossPmts[Month], EeGrossPmts[Month] + ErGrossPmts[Month]));

Premonitory defect markers: None.

Cause: The proximate cause of the intermittent error message is that
felicitous QNaNs sometimes arose in the COI rates, and propagated
through calculations until two quantities that were otherwise
materially equal compared unequal--because a QNaN compares unequal to
itself. The ultimate cause is that COI rates were looked up outside
a vector's bounds, producing incorrect values. This defect evaded
notice for years, presumably because products' maximum issue ages
equalled their rate tables' maximum select ages, as one would normally
expect; it was unmasked when an issue-age limit was lifted without
adding more rates to the corresponding COI table, and without testing
past the new age limit.

Genesis: Introduced before the lmi epoch (see line 164 here:
  actuarial_table.cpp,v 1.1 2005/01/14 19:47:44 chicares
), most likely during a thoroughgoing redesign.

Provident safeguards: Intermittent QNaNs were caught by haphazard
assertions. Due to the distance between proximate and ultimate causes,
however, the problem took many hours to localize.

Similar defects elsewhere: This specific issue occurs nowhere else.
That is not to say that array bounds are violated nowhere else; or
that invalid parameters always elicit an error message instead of
yielding invalid output.

Note the inline documentation for actuarial_table::specific_values()
as of 20080519T0111Z: the corrected behavior is consistent with prior
intention, for backward compatibility. If a product permits issue at
an age higher than a table's maximum select age due to a defect in its
database, then no diagnostic is given, even though this behavior might
not be desired. Thus, defects in proprietary product files (external
to lmi proper) are possible; but they are easily avoided by setting
the maximum issue age no higher than the maximum age for which select
rates are provided.

Critique of the past: The original unit tests lacked power to detect
this defect because they used a table with minimum age zero, for which
the original code happened to give the correct answer.

An issue-age limit was lifted without testing. It is fortunate that
this happened, because it unmasked a number of grave issues, both in
lmi itself and in proprietary data files for the product series for
which actuarial_table::values_elaborated() had been coded. Supposedly
that implementation had been carefully tested, but no documentation
tells how; it is said that sixty test cases were run, yet it is clear
that the most obvious edge conditions cannot have been tested at all.

The issue could have been localized with far less effort by using
libstdc++'s debug mode, which became unusable in lmi a year ago:
  http://lists.nongnu.org/archive/html/lmi/2007-04/msg00021.html
It could almost certainly be made usable again by adding an extra
build of wx, which would take less time to implement than it would
have saved in this single instance--and of course it would be useful
for other purposes, and could have revealed this problem earlier.

Watchwords for the future: Inspect rate-table limits when liberalizing
an issue limit. Include all edge conditions in unit tests. Elaborate
unit tests can still have coverage gaps, which may well be invisible
to their author, but apparent to others who look carefully at them or
just test the system. The value of system testing is measured not by
the number of test cases, but by the insight displayed in selecting
and documenting them; and it cannot be measured at all if it is not
documented. Penny-wise and pound-foolish strategies, like allowing
libstdc++'s debug mode to become unusable, are not wise.

Person-hours spent on diagnosis and repair: Sixty-three.

Automated tests: Unit tests in 'actuarial_table_test.cpp' have been
strengthened and redesigned as detailed in the next section.

Repairs completed: See 'ChangeLog' (20080518T1345Z, 20080523T0153Z).

The originally-noticed defect was undefined behavior due to indexing
out of bounds when attempting to look up a rate for an age greater
than the maximum select age. It was fixed by mapping
  q[max_select_age+c]+t --> q[max_select_age]+c+t, 0 < c, 0 < t
and testing and documenting that reasonable extension. As a further
safeguard, bounds-checked standard-library function at() is used.

20080518T1345Z add a failing unit test for past-the-end index
20080518T1531Z reproduce defect within unit test: q[1+max_select_age]
20080518T1544Z check bounds by using at() instead of operator[]
20080518T1559Z prevent out-of-bounds indexing
20080518T1637Z refactor for clarity
20080518T1638Z add unit tests to prove the problem has been resolved
20080519T0111Z document the corrected behavior
20080520T0305Z make documentation difficult to misunderstand

Analysis of nearby code finds a collateral defect: with an unexpected
argument, code could attempt to access a rate for an age lower than a
table's minimum. This causes a reproducible segfault, which is averted
by asserting a precondition. It seems unlikely that this problem could
have arisen along any path through production code, but the point is
to make it clearly impossible.

20080519T1157Z add a failing unit test for before-the-beginning index
20080519T1158Z add an assertion, to throw instead of segfaulting

Now the unit tests need to be refurbished. They've grown by accretion
of independent parts with no overall design. One test was weakened by
mistakenly truncating the results it compared; that was difficult even
to discern, because a coding style that was pellucid for a single test
became an obstacle to comprehension and maintenance as similar tests
multiplied. Most of all, only small portions of certain tables were
coded for testing (the end of one, and the beginning of another), and
one table was dangerously degenerate in that its minimum age was zero:
but for that unhappy choice, the defect that triggered this defect
report would have been noticed long ago. Hard-coded numeric constants
specific to particular tables must be abstracted first, so that these
fragments of tables can be replaced by one complete table that has no
such degeneracy. This work is arduous and distasteful, but it'll serve
us well if any further problems are found.

20080520T0307Z refactor for clarity
20080520T1351Z abstract numeric constants for one table
20080521T0351Z remove erroneous truncation of test results
20080522T0137Z abstract numeric constants for another table
20080522T1353Z use a table that's likelier to fail unit tests
20080523T0153Z ditto

Repairs postponed: None, except for libstc++ debug mode.

20080609T1629Z <gchicares@sbcglobal.net>

Symptom: The last COI reentry date could not be entered appropriately
for inforce cases. Depending on rate class, it was either unexpectedly
grayed out, or, less often, not allowed to exceed the effective date.

Discovered: By author, local user, and management, while investigating
an agent complaint about an inforce illustration.

Location: GUI restrictions in 'input_harmonization.cpp':

|    LastCoiReentryDate.maximum(EffectiveDate.value());

This is generally inappropriate for inforce.

|    LastCoiReentryDate.enable(2 == database_->Query(DB_CoiInforceReentry));

This is correct. However, one product's database had '0' for unismoke
where '2' was intended; that prompted the agent complaint.

Algorithm restrictions: 'full_years_since_last_rate_reset' was set
thus in 'ihs_basicval.cpp':

|    attained_age(Input_->LastCoiReentryDate, Input_->EffDate, false)

which gives a necessary but poorly-phrased error message:
  "As-of date...precedes birthdate"
when reentry date follows effective date (and could be off by one
because the interval should be measured between policy anniversaries,
not anniversaries of the reentry date). Furthermore, it was guarded
thus in 'actuarial_table.cpp':

|    LMI_ASSERT(0 <= full_years_since_last_rate_reset);

and that assertion was necessary to prevent a catastrophic error a few
lines below, where the algorithm required issue age to be set back:

|    std::vector<double> v = specific_values
|        (issue_age - r
|        ,length + r
|        );
|    v.erase(v.begin(), v.begin() + r);

However, reentry after the issue date requires age to be set forward;
code to handle that already existed about ten lines away:

|    std::vector<double> v = specific_values
|        (issue_age + full_years_since_issue
|        ,length - full_years_since_issue
|        );
|    v.insert(v.begin(), full_years_since_issue, 0.0);

but was used for a different rate-lookup method.

Premonitory defect markers: None.

Cause: The proximate cause is that GUI and table-lookup code were both
limited in a way appropriate only for new business, and also that one
product's database had an incorrect 'DB_CoiInforceReentry' value. The
ultimate cause for a system with glaring superficial defects being put
into production is lack of testing.

Genesis: Introduced 20071006T2256Z in brand-new code.

Provident safeguards: Although data was entered incorrectly and there
was an error in a proprietary product file, lmi itself did not accept
input that it could diagnose as invalid, or produce incorrect output
for valid input. At first we guessed that the problem was merely an
excessive limitation in the GUI, but persistent attempts to circumvent
that limitation were defeated by enforcement of preconditions in the
table-lookup code that made it clear why that hypothesis was wrong.

The (20080520T0307Z, 20080523T0153Z) refactoring of unit tests made
this repair easier (and a defective repair harder) than it otherwise
would have been.

Similar defects elsewhere: This specific issue occurs nowhere else in
lmi. Proprietary product files that lmi uses have never been audited,
but are believed to contain other errors.

Critique of the past: Even superficial testing of inforce cannot have
been performed. System specifications cannot have been reviewed. It
was not disclosed that these requirements were not met.

Watchwords for the future: It has been said [giyf] that
  "Given enough eyeballs, all bugs are shallow." --esr, CatB
and, to our great cost, we have demonstrated the inverse. Testing that
is undocumented may be perfunctory or worse.

Person-hours spent on diagnosis and repair: One hundred fifty-five.

Automated tests: Unit tests in 'actuarial_table_test.cpp' have been
extended to encompass the widened range of reentry dates, strengthened
to exercise edge conditions better, and rewritten for clarity and ease
of maintenance.

Repairs completed: See 'ChangeLog' (20080524T1137Z, 20080601T2227Z),
(20080606T1132Z, 20080606T1133Z).

Several days of analysis and refactoring laid a necessary foundation
for the salient code changes:

20080528T1410Z avoid misleading "birthdate" diagnostic
20080528T1418Z fix date calculation--measure from effective date
20080529T2355Z permit reentry after issue: GUI
20080530T1658Z permit reentry after issue: table lookup

Two further days were then spent refactoring for clarity, most notably
in order to eliminate confusion due to using opposite algebraic signs
on otherwise similar adjustments for two table-lookup methods.

Repairs postponed: None. This case is treated correctly, though it may
seem otherwise at first glance:
  2010-01-01 certificate effective date
  2012-03-01 inforce reillustration date
  2012-02-01 group reentry date
One might suppose that the select table must be reentered on the next
certificate anniversary, 2013-01-01. However, no such reentry takes
place if the certificate leaves the group before that anniversary, as
well it might; and no conditional reentry is to be illustrated. The
system, therefore, correctly refuses to accept this reentry date; the
proper input is the last group reentry date preceding or coincident
with a certificate's most recent anniversary.

20090106T1501Z <gchicares@sbcglobal.net>

Symptom: Spreadsheet output for a census was written to separate
files, one for each cell as well as one for the composite, instead of
to a single file for all. "Census | Print case to spreadsheet"
reproduces the problem with any census.

Discovered: By local end users, within hours of first using a new
release, while running production cases.

Location: In 'emit_ledger.cpp', calls to serialized_file_path() were
moved upstream, because that function is useful only for groups.
However, the 'mce_emit_spreadsheet' case was overlooked: it had used
the non-serialized filepath previously, but as a result of refactoring
error received an already-serialized argument. This case requires the
same (non-serialized) filepath for all cells in a group, so that all
are printed to a single file.

| http://cvs.savannah.gnu.org/viewvc/lmi/lmi/emit_ledger.cpp?r1=1.14&r2=1.15&diff_format=s

|   --------------------------- 1.14 ---------------------------     ----------------- 1.15 ----------------

| if(emission & mce_emit_pdf_file)
|   serialized_file_path(filepath, serial_index, "ill").string() --> filepath
| if(emission & mce_emit_pdf_to_printer)
|   serialized_file_path(filepath, serial_index, "ill").string() --> filepath
| if(emission & mce_emit_pdf_to_viewer)
|   serialized_file_path(filepath, serial_index, "ill").string() --> filepath
| if(emission & mce_emit_test_data)
|   serialized_file_path(filepath, serial_index, "test")         --> fs::change_extension(filepath, ".test")
| if(emission & mce_emit_spreadsheet)
|   filepath.string()                                            --> filepath.string()
| if(emission & mce_emit_custom_0)
|   filepath.string()                                            --> filepath.string()

The 'mce_emit_custom_0' case may appear to have the same problem, but
in fact does not: that output type by its nature cannot be used with a
census, and upstream code always passes it an appropriate filepath.

Premonitory defect markers: None.

Cause: The proximate cause was an oversight. The ultimate cause for
this error going into production was lack of testing.

Genesis: Introduced 20081121T0135Z in a refactoring.

Provident safeguards: None.

Similar defects elsewhere: None.

Critique of the past: This should have been caught in testing.

Watchwords for the future: Same as for the 20080609T1629Z defect.
It has been said [giyf] that
  "Given enough eyeballs, all bugs are shallow." --esr, CatB
and, to our great cost, we have demonstrated the inverse. Testing that
is undocumented may be perfunctory or worse.

Person-hours spent on diagnosis and repair: Thirty.

Automated tests: 'path_utility_test.cpp' contains unit tests, which
were augmented contemporaneously with this refactoring; however, this
was an integration error. No automated test covers menu commands, and
none has been added for this command.

Repairs completed: See 'ChangeLog' for 20090106T1501Z.

Pinpointing the error was the most laborious subtask. To prove that
the "Genesis" and "Location" above are correct, bracketing snapshots
were built as follows, then tested:

| mkdir 20081121T0100; pushd 20081121T0100; cvs -z3 checkout -D "2008-11-21 01:00" lmi 2>&1 |less; popd
| mkdir 20081121T0200; pushd 20081121T0200; cvs -z3 checkout -D "2008-11-21 02:00" lmi 2>&1 |less; popd

This patch:
  http://lists.nongnu.org/archive/html/lmi/2008-11/msg00008.html
had to be applied in both snapshot directories. Patching failed for
'install_miscellanea.make', but that file can be disregarded because
it is not used in a normal build.

Repairs postponed: None.

20120206T1341Z <gchicares@sbcglobal.net>

Symptom: An off-anniversary inforce case with minimum monthly payments
was incorrectly identified as a MEC.

Discovered: By local end users, within one day after a production
release, while running production cases.

Location: In 'ihs_acctval.cpp', these "Update" calls used to be
unconditional, which was wrong:

|    // Skip this in an incomplete initial inforce year.
...
|    if(Year != InforceYear || 0 == InforceMonth)
|        {
|        Irc7702_ ->UpdateBOY7702();
|        Irc7702A_->UpdateBOY7702A(Year);
|        }

On 20120115T1429Z, they were made conditional.

Premonitory defect markers: None at the time of the release. On
20120131T1059Z this marker was added to 'ihs_irc7702a.cpp':

|/// Called at beginning of each policy year. TODO ?? TAXATION !! No, that's
|/// wrong if contract year and policy year don't coincide.

Cause: The proximate cause is that 'Ax' was initialized to zero by
Irc7702A::Initialize7702A(), and is set appropriately downstream by
Irc7702A::UpdateBOY7702A() iff the latter was called--but it truly
should not be called in an incomplete initial inforce year because it
increments cumulative 7PP. No regression test covered the scenario
that elicits the observed error, even though it's a common scenario.
The ultimate cause is that management was permitted to accept an
unfinished implementation for long-term production by overriding our
objection that it didn't yet comply with the tax code.

Genesis: Introduced 20120115T1429Z while fixing a different defect.

Provident safeguards: None.

Similar defects elsewhere: Approximately two hundred taxation issues
were identified and marked in a code audit just before the release.

Critique of the past: Avoid releasing a prototype that appears to work
tolerably well in "most" cases. Include the commonest scenarios in
regression tests.

Watchwords for the future: When reworking old code with so many
interdependent defects, avoid releasing a series of incremental
improvements into production, because concomitant defects are apt to
affect more end users than any particular improvement. It is better to
hear
  "This big release fixes many problems, some of which affected me,
  yet it introduces a couple of new problems for me"
once than
  "It's nice that you fixed something I don't care about, but you
  broke something that I depend on"
repeatedly.

Person-hours spent on diagnosis and repair: Thirty-eight.

Automated tests: The case that triggered this investigation, with
client data removed, has been adopted as a new regression test. Test
coverage for GPT and MEC testing is still inadequate. On the other
hand, since 20111223T1707Z an outside consultant's acceptance tests
for the standalone GPT server have routinely been run, though those
tests do not cover integration between GPT code and illustrations.

Repairs completed: Irc7702A::Initialize7702A() now initializes 'Ax' to
the same value already used for 'SavedNSP', which in this case is the
value Irc7702A::UpdateBOY7702A() formerly assigned to it. It would be
wrong to revert the condition for calling Irc7702A_->UpdateBOY7702A()
that was added 20120115T1429Z, because that would reinstate an error
(the 7PP for the first inforce year was added to cumulative 7PP, which
already included it).

Repairs postponed: The sole purpose of the minimal repair completed
today is to fix a regression error; the two hundred or so taxation
issues mentioned above are as yet unaddressed.

