// DefectLog for "Let me illustrate...". See 'MAINTENANCE' after license.
//
// Copyright (C) 2007 Gregory W. Chicares.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
//
// http://savannah.nongnu.org/projects/lmi
// email: <chicares@cox.net>
// snail: Chicares, 186 Belle Woods Drive, Glastonbury CT 06033, USA

// $Id: DefectLog,v 1.2 2007-07-05 18:54:53 chicares Exp $

MAINTENANCE

Please write entries this way:

[ 1] YYYYMMDDTHHMMZ <yourname@domain.net>
[ 2] Symptom: [observable behavior, with steps to reproduce]
[ 3] Discovered:
       * by {author, reviewer, tester, local user, remote user}
       * during [activity]
[ 4] Location: [brief code snippet, citing source file]
[ 5] Premonitory defect markers: [if any]
[ 6] Cause: [what's wrong with the code; proximate vs. ultimate cause]
[ 7] Genesis: [in which revision was the defect introduced?]
       * in brand-new code? refactoring? redesign?
       * while fixing a defect? the same defect?
[ 8] Provident safeguards: [what prevented more severe damage?]
[ 9] Similar defects elsewhere:
[10] Critique of the past: [how could this have been avoided?]
[11] Watchwords for the future:
[12] Person-hours spent on diagnosis and repair:
[13] Automated tests: [were there any before? have any been added?]
[14] Repairs completed: [cite 'ChangeLog'; summarize if not obvious]
[15] Repairs postponed: [cite tracker item]

Limit lines to seventy characters so that they can be quoted and
requoted in email without wrapping.

//

20070705T0108Z <chicares@cox.net>

Symptom: Calendar date displayed as '-4712-02--14'. To reproduce:
  cd /tmp
  rm expiry
  touch expiry
  echo -n 0123456789abcdef0123456789abcdef >passkey
  /opt/lmi/bin/lmi_wx_shared.exe
Error message:
  Current date '2007-06-25' is invalid: this system expired on
  '-4712-02--14'. Contact the home office.
Variation:
  echo -n '2400000' > expiry

Discovered: By author, while testing simulated precondition failures
after the 20070626T0029Z change.

Location: Stream extraction into class calendar_date:

  authenticity.cpp

    is >> begin >> end;
    if(!is.eof())
      [error message]

  calendar_date.cpp

    int z;
    is >> z;
    date.julian_day_number(z);

Premonitory defect markers:

  authenticity_test.cpp

  // TODO ?? Add tests for diagnostics that aren't tested yet.

Cause: The proximate cause is that the expiry date appears to be in
the neighborhood of julian day number zero, which is formatted as an
invalid gregorian date because it is outside the valid bounds of ACM
algorithm 199. The ultimate cause is that the calendar-date extractor
doesn't initialize 'z', yet may fail to change its value and doesn't
set 'failbit', which isn't tested anyway where it should be.

Genesis: Introduced before the lmi epoch:
  calendar_date.cpp,v 1.1 2005/01/14 19:47:44 chicares
and shortly thereafter--this file
  authenticity.cpp,v 1.1 2006/12/21 17:50:29 chicares
has this ancestor:
  secure_date.cpp,v 1.3 2005/07/05 17:49:53 chicares
and the purpose of the last revision was to fix a defect in error
reporting. Probably these errors were copied from even older code.

Provident safeguards: std::exit() is called immediately after the
error message is displayed. However, the value of 'z' is undefined and
happened to be around zero only by luck; a different value might have
caused authentication to succeed erroneously. Only discipline in
assembling a distribution could have prevented erroneous acceptance of
an 'expiry' file containing only a (valid) begin date, as in the
variation given in "Symptom" above.

Similar defects elsewhere: Numerous instances of the defects critiqued
below.

Critique of the past: "Care about the output variable of an extractor"
(Langer & Kreft 3.1.3.3). Extractors should set 'failbit' (and reset
'eofbit') on error (news:3A5D9F04.AACDF32B@dresdner-bank.com). Stream
state should be tested at the end of each series of stream operations.

Watchwords for the future: Don't copy idioms from old code blithely.
Include all edge conditions in unit tests.

Person-hours spent on diagnosis and repair: Twenty-six.

Automated tests: Unit tests
  authenticity_test.cpp
  calendar_date_test.cpp
that were extensive but not comprehensive have been further extended.

Repairs completed:
  calendar_date*.?pp
20070703T1848Z Preparatory refactoring.
20070703T1942Z Ascertain and add workable bounds for Algorithm 199.
20070703T2032Z Add a failing unit test.
20070703T2033Z Correct the unit-test failure.
  authenticity*.?pp
20070704T0439Z Add a failing unit test.
20070704T0440Z Correct one cause of unit-test failure.
20070704T0453Z Correct remaining cause of unit-test failure.

Repairs postponed: The defects critiqued above are ubiquitous. The
premonitory defect marker cited above cannot yet be removed. See:
  https://savannah.nongnu.org/task/index.php?7061

